<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/flow/steps/jobRequirementsMatching/suggestedSectionModal/SuggestedSectionModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/jobRequirementsMatching/suggestedSectionModal/SuggestedSectionModal.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useSuggestProfileSectionMutation } from &quot;@/store/services/llmApi&quot;;&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogDescription,&#10;  DialogFooter,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import {&#10;&#10;  FileText,&#10;} from &quot;lucide-react&quot;;&#10;import { GeneratedSectionArea } from './GeneratedSectionArea';&#10;import { LoadingState } from &quot;./LoadingState&quot;;&#10;import { Sidebar } from &quot;./Sidebar&quot;;&#10;import { ModalFooter } from &quot;./ModalFooter&quot;;&#10;import { sectionTypes, SectionTypeEnum } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { Match } from &quot;@/store/slices/matchesSlice&quot;;&#10;&#10;interface ProfileSection {&#10;  id: string;&#10;  type: string;&#10;  content: string;&#10;}&#10;&#10;interface SuggestedSectionModalProps {&#10;  match: Match;&#10;  open: boolean;&#10;  orderedMatchedProfileSections: ProfileSection[];&#10;  onClose: () =&gt; void;&#10;  onSaveAndMatch: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSaveOnly: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSkip: () =&gt; void;&#10;}&#10;&#10;&#10;&#10;export const SuggestedSectionModal: React.FC&lt;SuggestedSectionModalProps&gt; = ({&#10;  match,&#10;  open,&#10;  orderedMatchedProfileSections,&#10;  onClose,&#10;  onSaveAndMatch,&#10;  onSaveOnly,&#10;  onSkip,&#10;}) =&gt; {&#10;  const [type, setType] = useState&lt;SectionTypeEnum&gt;(sectionTypes[0]);&#10;  const [content, setContent] = useState(&quot;&quot;);&#10;  const [baseId, setBaseId] = useState&lt;string | null&gt;(null);&#10;  const [summaryOfChanges, setSummaryOfChanges] = useState&lt;string&gt;(&quot;&quot;);&#10;  const [isBaseSectionOpen, setIsBaseSectionOpen] = useState(false);&#10;  const [isSummaryOpen, setIsSummaryOpen] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Advanced features state&#10;  const [useAutoSelection, setUseAutoSelection] = useState(true);&#10;  const [selectedProfileSectionId, setSelectedProfileSectionId] = useState&lt;string | null&gt;(null);&#10;  const [customHint, setCustomHint] = useState(&quot;&quot;);&#10;&#10;  // Use mutation similar to triggerEnhance pattern&#10;  const [triggerSuggest, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useSuggestProfileSectionMutation();&#10;  // Use mutation similar to triggerEnhance pattern&#10;  const [triggerSuggest, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useSuggestProfileSectionMutation();&#10;    profile_sections: useAutoSelection&#10;      ? orderedMatchedProfileSections.slice(0, 3) // Top 3 for API optimization&#10;      : selectedProfileSectionId&#10;        ? orderedMatchedProfileSections.filter(ps =&gt; ps.id === selectedProfileSectionId)&#10;        : [],&#10;    gap_description: match.gap_description,&#10;    profile_sections: useAutoSelection&#10;      ? orderedMatchedProfileSections.slice(0, 3) // Top 3 for API optimization&#10;  });&#10;&#10;  // Trigger suggestion when modal opens&#10;  useEffect(() =&gt; {&#10;    if (open) {&#10;    gap_description: match.gap_description,&#10;    custom_hint: customHint || undefined,&#10;      setSummaryOfChanges(&quot;&quot;);&#10;      setError(null);&#10;&#10;      const queryPayload = prepareQueryPayload();&#10;&#10;      // Only trigger if we have valid data&#10;      if (queryPayload.profile_sections.length &gt; 0) {&#10;        triggerSuggest(queryPayload);&#10;      }&#10;    } else {&#10;      reset();&#10;      setType(sectionTypes[0]);&#10;      setContent(&quot;&quot;);&#10;      setBaseId(null);&#10;      if (queryPayload.profile_sections.length &gt; 0) {&#10;        triggerSuggest(queryPayload);&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, orderedMatchedProfileSections, match]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setBaseId(data.base_profile_section_id);&#10;      setType((data.suggested_profile_section.type as SectionTypeEnum) || sectionTypes[0]);&#10;      setContent(data.suggested_profile_section.content || &quot;&quot;);&#10;      setSummaryOfChanges(data.summary_of_changes || &quot;&quot;);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to generate suggestion');&#10;    } else if (isError) {&#10;      setError('Failed to generate suggestion');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  // Reset selected base when switching to auto mode&#10;  useEffect(() =&gt; {&#10;    if (useAutoSelection) {&#10;      setSelectedProfileSectionId(null);&#10;    }&#10;  }, [useAutoSelection]);&#10;&#10;  const handleRegenerateClick = () =&gt; {&#10;    const queryPayload = prepareQueryPayload();&#10;&#10;    if (queryPayload.profile_sections.length &gt; 0) {&#10;      setError(null);&#10;      triggerSuggest(queryPayload);&#10;    }&#10;  };&#10;&#10;  function getErrorMessage(error: any): string {&#10;    if (!error) return &quot;&quot;;&#10;    if (typeof error === &quot;string&quot;) return error;&#10;    if (error.status &amp;&amp; error.data &amp;&amp; typeof error.data === &quot;string&quot;)&#10;      return error.data;&#10;    if (error.message) return error.message;&#10;    return &quot;An error occurred.&quot;;&#10;  }&#10;    if (queryPayload.profile_sections.length &gt; 0) {&#10;  const baseSection = baseId&#10;    ? orderedMatchedProfileSections.find((s) =&gt; s.id === baseId)&#10;    : null;&#10;&#10;  const isEditing = !!baseSection;&#10;  const matchBtnLabel = isEditing ? &quot;Update &amp; Match&quot; : &quot;Add &amp; Match&quot;;&#10;  const onlyBtnLabel = isEditing ? &quot;Update Only&quot; : &quot;Add Only&quot;;&#10;      triggerSuggest(queryPayload);&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;FileText className=&quot;h-6 w-6&quot; /&gt; Suggested Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            We've generated a profile section to better match the job requirements. &#10;            Review and customize it below.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;flex-1 flex flex-col min-h-0 overflow-auto&quot;&gt;&#10;          {isLoading ? (&#10;            &lt;LoadingState /&gt;&#10;          ) : error ? (&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertDescription&gt;{getErrorMessage(error)}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex flex-col h-full lg:flex-row min-h-0 &quot;&gt; &#10;              {/* Left Content Area */}&#10;              &lt;div className=&quot;lg:w-2/3 flex flex-col&quot;&gt;&#10;                &lt;GeneratedSectionArea&#10;                  content={content}&#10;                  setContent={setContent}&#10;                  contentLength={contentLength}&#10;                  wordCount={wordCount}&#10;                  isEditing={isEditing}&#10;                  type={type}&#10;                  setType={setType}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {/* Right Sidebar */}&#10;              &lt;div className=&quot;lg:w-1/3 flex flex-col mt-6 lg:mt-0 lg:ml-6&quot;&gt;&#10;                &lt;div className=&quot;flex-1 space-y-4 py-1 min-h-0&quot;&gt;&#10;                  &lt;Sidebar&#10;                    requirement={match.requirement}&#10;                    type={type}&#10;                    setType={setType}&#10;                    isEditing={isEditing}&#10;                    summaryOfChanges={summaryOfChanges}&#10;                    isSummaryOpen={isSummaryOpen}&#10;                    setIsSummaryOpen={setIsSummaryOpen}&#10;                    baseSection={baseSection}&#10;                    isBaseSectionOpen={isBaseSectionOpen}&#10;                    setIsBaseSectionOpen={setIsBaseSectionOpen}&#10;                    profileSections={orderedMatchedProfileSections}&#10;                    useAutoSelection={useAutoSelection}&#10;                    setUseAutoSelection={setUseAutoSelection}&#10;                    selectedProfileSectionId={selectedProfileSectionId}&#10;                    setSelectedProfileSectionId={setSelectedProfileSectionId}&#10;                    customHint={customHint}&#10;                    setCustomHint={setCustomHint}&#10;                    onRegenerateClick={handleRegenerateClick}&#10;                    isLoading={isLoading}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;DialogFooter className=&quot;mt-4 flex-shrink-0 flex items-center gap-3&quot;&gt;&#10;          &lt;ModalFooter&#10;            isLoading={isLoading}&#10;            onSkip={onSkip}&#10;            isEditing={isEditing}&#10;            baseId={baseId}&#10;            onSaveOnly={onSaveOnly}&#10;            onSaveAndMatch={onSaveAndMatch}&#10;            type={type}&#10;            content={content}&#10;            onlyBtnLabel={onlyBtnLabel}&#10;            matchBtnLabel={matchBtnLabel}&#10;            disabled={isLoading || !content.trim()}&#10;          /&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { profileSectionSuggestionService } from &quot;@/services/profileSectionSuggestionService&quot;;&#10;import { ProfileSectionSuggestion } from &quot;@/services/zodModels&quot;;&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogDescription,&#10;  DialogFooter,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import {&#10;&#10;  FileText,&#10;} from &quot;lucide-react&quot;;&#10;import { GeneratedSectionArea } from './GeneratedSectionArea';&#10;import { LoadingState } from &quot;./LoadingState&quot;;&#10;import { Sidebar } from &quot;./Sidebar&quot;;&#10;import { ModalFooter } from &quot;./ModalFooter&quot;;&#10;import { sectionTypes, SectionTypeEnum } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { Match } from &quot;@/store/slices/matchesSlice&quot;;&#10;&#10;interface ProfileSection {&#10;  id: string;&#10;  type: string;&#10;  content: string;&#10;}&#10;&#10;interface SuggestedSectionModalProps {&#10;  match: Match;&#10;  open: boolean;&#10;  orderedMatchedProfileSections: ProfileSection[];&#10;  onClose: () =&gt; void;&#10;  onSaveAndMatch: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSaveOnly: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSkip: () =&gt; void;&#10;}&#10;&#10;&#10;&#10;export const SuggestedSectionModal: React.FC&lt;SuggestedSectionModalProps&gt; = ({&#10;  match,&#10;  open,&#10;  orderedMatchedProfileSections,&#10;  onClose,&#10;  onSaveAndMatch,&#10;  onSaveOnly,&#10;  onSkip,&#10;}) =&gt; {&#10;  const [type, setType] = useState&lt;SectionTypeEnum&gt;(sectionTypes[0]);&#10;  const [content, setContent] = useState(&quot;&quot;);&#10;  const [baseId, setBaseId] = useState&lt;string | null&gt;(null);&#10;  const [summaryOfChanges, setSummaryOfChanges] = useState&lt;string&gt;(&quot;&quot;);&#10;  const [isBaseSectionOpen, setIsBaseSectionOpen] = useState(false);&#10;  const [isSummaryOpen, setIsSummaryOpen] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Advanced features state&#10;  const [useAutoSelection, setUseAutoSelection] = useState(true);&#10;  const [selectedProfileSectionId, setSelectedProfileSectionId] = useState&lt;string | null&gt;(null);&#10;  const [customHint, setCustomHint] = useState(&quot;&quot;);&#10;&#10;  // Use LLM service hook for suggestion&#10;  const [triggerSuggest, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useLlmService&lt;ProfileSectionSuggestion&gt;(&#10;    profileSectionSuggestionService.suggestProfileSection&#10;  );&#10;&#10;  // Helper function to prepare query payload&#10;  const prepareQueryPayload = () =&gt; ({&#10;    requirement: match.requirement,&#10;    profileSections: useAutoSelection&#10;      ? orderedMatchedProfileSections.slice(0, 3)&#10;      : selectedProfileSectionId&#10;        ? orderedMatchedProfileSections.filter(ps =&gt; ps.id === selectedProfileSectionId)&#10;        : [],&#10;    gapDescription: match.gap_description,&#10;    customHint: customHint || undefined,&#10;    recommendation: match.recommendation,&#10;  });&#10;&#10;  // Trigger suggestion when modal opens&#10;  useEffect(() =&gt; {&#10;    if (open) {&#10;      setContent(&quot;&quot;);&#10;      setBaseId(null);&#10;      setSummaryOfChanges(&quot;&quot;);&#10;      setError(null);&#10;&#10;      const queryPayload = prepareQueryPayload();&#10;&#10;      // Only trigger if we have valid data&#10;      if (queryPayload.profileSections.length &gt; 0) {&#10;        triggerSuggest(&#10;          queryPayload.requirement,&#10;          queryPayload.profileSections,&#10;          queryPayload.gapDescription,&#10;          queryPayload.recommendation,&#10;          queryPayload.customHint&#10;        );&#10;      }&#10;    } else {&#10;      reset();&#10;      setType(sectionTypes[0]);&#10;      setContent(&quot;&quot;);&#10;      setBaseId(null);&#10;      setSummaryOfChanges(&quot;&quot;);&#10;      setIsBaseSectionOpen(false);&#10;      setIsSummaryOpen(true);&#10;      setUseAutoSelection(true);&#10;      setSelectedProfileSectionId(null);&#10;      setCustomHint(&quot;&quot;);&#10;      setError(null);&#10;    }&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, orderedMatchedProfileSections, match]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setBaseId(data.base_profile_section_id);&#10;      setType((data.suggested_profile_section.type as SectionTypeEnum) || sectionTypes[0]);&#10;      setContent(data.suggested_profile_section.content || &quot;&quot;);&#10;      setSummaryOfChanges(data.summary_of_changes || &quot;&quot;);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to generate suggestion');&#10;    } else if (isError) {&#10;      setError('Failed to generate suggestion');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  // Reset selected base when switching to auto mode&#10;  useEffect(() =&gt; {&#10;    if (useAutoSelection) {&#10;      setSelectedProfileSectionId(null);&#10;    }&#10;  }, [useAutoSelection]);&#10;&#10;  const handleRegenerateClick = () =&gt; {&#10;    const queryPayload = prepareQueryPayload();&#10;&#10;    if (queryPayload.profileSections.length &gt; 0) {&#10;      setError(null);&#10;      triggerSuggest(&#10;        queryPayload.requirement,&#10;        queryPayload.profileSections,&#10;        queryPayload.gapDescription,&#10;        queryPayload.recommendation,&#10;        queryPayload.customHint&#10;      );&#10;    }&#10;  };&#10;&#10;  function getErrorMessage(error: any): string {&#10;    if (!error) return &quot;&quot;;&#10;    if (typeof error === &quot;string&quot;) return error;&#10;    if (error.status &amp;&amp; error.data &amp;&amp; typeof error.data === &quot;string&quot;)&#10;      return error.data;&#10;    if (error.message) return error.message;&#10;    return &quot;An error occurred.&quot;;&#10;  }&#10;&#10;  const baseSection = baseId&#10;    ? orderedMatchedProfileSections.find((s) =&gt; s.id === baseId)&#10;    : null;&#10;&#10;  const isEditing = !!baseSection;&#10;  const matchBtnLabel = isEditing ? &quot;Update &amp; Match&quot; : &quot;Add &amp; Match&quot;;&#10;  const onlyBtnLabel = isEditing ? &quot;Update Only&quot; : &quot;Add Only&quot;;&#10;  const contentLength = content.length;&#10;  const wordCount = content.trim().split(/\s+/).filter(word =&gt; word.length &gt; 0).length;&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-[90rem] max-h-[90vh] flex flex-col min-w-[75vw] min-h-[90vh]&quot;&gt;&#10;        &lt;DialogHeader className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;FileText className=&quot;h-6 w-6&quot; /&gt; Suggested Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            We've generated a profile section to better match the job requirements. &#10;            Review and customize it below.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;flex-1 flex flex-col min-h-0 overflow-auto&quot;&gt;&#10;          {isLoading ? (&#10;            &lt;LoadingState /&gt;&#10;          ) : error ? (&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertDescription&gt;{getErrorMessage(error)}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex flex-col h-full lg:flex-row min-h-0 &quot;&gt; &#10;              {/* Left Content Area */}&#10;              &lt;div className=&quot;lg:w-2/3 flex flex-col&quot;&gt;&#10;                &lt;GeneratedSectionArea&#10;                  content={content}&#10;                  setContent={setContent}&#10;                  contentLength={contentLength}&#10;                  wordCount={wordCount}&#10;                  isEditing={isEditing}&#10;                  type={type}&#10;                  setType={setType}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {/* Right Sidebar */}&#10;              &lt;div className=&quot;lg:w-1/3 flex flex-col mt-6 lg:mt-0 lg:ml-6&quot;&gt;&#10;                &lt;div className=&quot;flex-1 space-y-4 py-1 min-h-0&quot;&gt;&#10;                  &lt;Sidebar&#10;                    requirement={match.requirement}&#10;                    type={type}&#10;                    setType={setType}&#10;                    isEditing={isEditing}&#10;                    summaryOfChanges={summaryOfChanges}&#10;                    isSummaryOpen={isSummaryOpen}&#10;                    setIsSummaryOpen={setIsSummaryOpen}&#10;                    baseSection={baseSection}&#10;                    isBaseSectionOpen={isBaseSectionOpen}&#10;                    setIsBaseSectionOpen={setIsBaseSectionOpen}&#10;                    profileSections={orderedMatchedProfileSections}&#10;                    useAutoSelection={useAutoSelection}&#10;                    setUseAutoSelection={setUseAutoSelection}&#10;                    selectedProfileSectionId={selectedProfileSectionId}&#10;                    setSelectedProfileSectionId={setSelectedProfileSectionId}&#10;                    customHint={customHint}&#10;                    setCustomHint={setCustomHint}&#10;                    onRegenerateClick={handleRegenerateClick}&#10;                    isLoading={isLoading}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;DialogFooter className=&quot;mt-4 flex-shrink-0 flex items-center gap-3&quot;&gt;&#10;          &lt;ModalFooter&#10;            isLoading={isLoading}&#10;            onSkip={onSkip}&#10;            isEditing={isEditing}&#10;            baseId={baseId}&#10;            onSaveOnly={onSaveOnly}&#10;            onSaveAndMatch={onSaveAndMatch}&#10;            type={type}&#10;            content={content}&#10;            onlyBtnLabel={onlyBtnLabel}&#10;            matchBtnLabel={matchBtnLabel}&#10;            disabled={isLoading || !content.trim()}&#10;          /&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flow/steps/profileSectionAnalysis/EnhanceProfileSectionModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/profileSectionAnalysis/EnhanceProfileSectionModal.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { ProfileSection } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { useEnhanceMatchedProfileSectionMutation, EnhancementResponse, BaseJobRequirementMatch } from &quot;@/store/services/llmApi&quot;;&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {&#10;  Card,&#10;  CardContent,&#10;  CardDescription,&#10;  CardHeader,&#10;  CardTitle,&#10;} from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Alert,&#10;  AlertDescription,&#10;  AlertTitle,&#10;} from &quot;@/components/ui/alert&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;;&#10;import { Separator } from &quot;@/components/ui/separator&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import {&#10;  Sparkles,&#10;  FileText,&#10;  Lightbulb,&#10;  CheckCircle,&#10;  AlertCircle,&#10;  Loader2,&#10;  Edit3&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface EnhanceProfileSectionModalProps {&#10;  profileSection: ProfileSection;&#10;  baseJobRequirementMatches: BaseJobRequirementMatch[];&#10;  open: boolean;&#10;  onClose: () =&gt; void;&#10;  onApplyChanges: (enhancedContent: string) =&gt; void;&#10;  onKeepOriginal: () =&gt; void;&#10;}&#10;&#10;export const EnhanceProfileSectionModal: React.FC&lt;EnhanceProfileSectionModalProps&gt; = ({&#10;  profileSection,&#10;  baseJobRequirementMatches,&#10;  open,&#10;  onClose,&#10;  onApplyChanges,&#10;  onKeepOriginal,&#10;}) =&gt; {&#10;  const [enhancedContent, setEnhancedContent] = useState(&quot;&quot;);&#10;  const [enhancementsMade, setEnhancementsMade] = useState&lt;string[]&gt;([]);&#10;  const [reasoning, setReasoning] = useState&lt;string[]&gt;([]);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [triggerEnhance, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useEnhanceMatchedProfileSectionMutation();&#10;&#10;  const [triggerEnhance, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useEnhanceMatchedProfileSectionMutation();&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;      triggerEnhance({&#10;        profile_section: profileSection,&#10;        base_job_requirement_matches: baseJobRequirementMatches,&#10;      });&#10;    } else {&#10;      reset();&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;    }&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, profileSection, baseJobRequirementMatches]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setEnhancedContent(data.enhanced_profile_section.content);&#10;      setEnhancementsMade(data.enhancements_made);&#10;      setReasoning(data.reasoning);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to fetch enhancement');&#10;    } else if (isError) {&#10;      setError('Failed to fetch enhancement');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  const handleApplyChanges = () =&gt; {&#10;    onApplyChanges(enhancedContent);&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-[75vw] max-h-[90vh] overflow-hidden flex flex-col min-w-[75vw] min-h-[90vh]&quot;&gt;&#10;        &lt;DialogHeader className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Sparkles className=&quot;w-5 h-5 text-blue-600&quot; /&gt;&#10;            Enhance Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            AI-powered suggestions to improve your {profileSection.type} section based on job requirements.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        {isLoading ? (&#10;          &lt;div className=&quot;flex-1 space-y-4 px-1&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2 text-sm text-gray-600&quot;&gt;&#10;              &lt;Loader2 className=&quot;w-4 h-4 animate-spin&quot; /&gt;&#10;              Generating AI-powered enhancements...&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-6 h-full&quot;&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-2/3&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : error ? (&#10;          &lt;div className=&quot;flex-1 px-1&quot;&gt;&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;AlertTitle&gt;Enhancement Failed&lt;/AlertTitle&gt;&#10;              &lt;AlertDescription&gt;{error}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;flex-1 grid grid-cols-3 gap-6 overflow-hidden&quot;&gt;&#10;            {/* Left Column - Enhanced Content */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto col-span-2&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhanced Content Section */}&#10;                  &lt;Card className=&quot;h-fit&quot;&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Edit3 className=&quot;w-4 h-4 text-green-600&quot; /&gt;&#10;                        Enhanced Suggestion&#10;                        &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800&quot;&gt;&#10;                          AI Generated&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Review and edit the AI-enhanced version of your content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;Textarea&#10;                        value={enhancedContent}&#10;                        onChange={(e) =&gt; setEnhancedContent(e.target.value)}&#10;                        className=&quot;min-h-[300px] resize-none&quot;&#10;                        placeholder=&quot;Enhanced content will appear here...&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#10;                        {enhancedContent.length} characters&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;&#10;                  {/* Reasoning Section */}&#10;                  {reasoning.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600&quot; /&gt;&#10;                          AI Reasoning&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Understanding the logic behind these suggestions&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot; rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            {reasoning.map((reasonPoint, index) =&gt; (&#10;                              &lt;div key={index} className=&quot;flex items-start gap-2 bg-amber-50 border border-amber-200 rounded-lg p-4&quot;&gt;&#10;                                &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                                &lt;span className=&quot;text-sm text-amber-900 leading-relaxed&quot;&gt;&#10;                                  {reasonPoint}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Right Column - Original Content &amp; Context */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhancements Made Section */}&#10;                  {enhancementsMade.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600&quot; /&gt;&#10;                          Key Improvements&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Specific enhancements made to address job requirements&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                          {enhancementsMade.map((enhancement, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;flex items-start gap-2 p-3 bg-blue-50 rounded-lg&quot;&gt;&#10;                              &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                              &lt;span className=&quot;text-sm text-blue-900&quot;&gt;{enhancement}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;&#10;                  {/* Original Content Section */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Original Content&#10;                        &lt;/div&gt;&#10;                        &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#10;                          Reference&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Your current {profileSection.type} section content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;div className=&quot;bg-gray-50 rounded-lg p-4 border max-h-[300px] overflow-y-auto&quot;&gt;&#10;                        &lt;div className=&quot;whitespace-pre-wrap text-sm leading-relaxed&quot;&gt;&#10;                          {profileSection.content}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Job Requirements Context */}&#10;                  {baseJobRequirementMatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Matched Requirements&#10;                          &lt;Badge variant=&quot;outline&quot;&gt;{baseJobRequirementMatches.length}&lt;/Badge&gt;&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Job requirements this section addresses&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2 max-h-[200px] overflow-y-auto&quot;&gt;&#10;                          {baseJobRequirementMatches.map((match, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;text-sm p-2 bg-gray-50 rounded border-l-2 border-gray-300&quot;&gt;&#10;                              &quot;{match.requirement}&quot;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;Separator className=&quot;my-4&quot; /&gt;&#10;&#10;        &lt;DialogFooter className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex gap-3 w-full sm:w-auto&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;outline&quot;&#10;              onClick={onKeepOriginal}&#10;              disabled={isLoading}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              Keep Original&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              onClick={handleApplyChanges}&#10;              disabled={isLoading || !enhancedContent.trim()}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              {isLoading ? (&#10;                &lt;&gt;&#10;                  &lt;Loader2 className=&quot;w-4 h-4 mr-2 animate-spin&quot; /&gt;&#10;                  Processing...&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;Sparkles className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                  Apply Changes&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};" />
              <option name="updatedContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { ProfileSection } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { matchedProfileSectionEnhancerService } from &quot;@/services/matchedProfileSectionEnhancerService&quot;;&#10;import { EnhancedMatchedProfileSection } from &quot;@/services/zodModels&quot;;&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {&#10;  Card,&#10;  CardContent,&#10;  CardDescription,&#10;  CardHeader,&#10;  CardTitle,&#10;} from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Alert,&#10;  AlertDescription,&#10;  AlertTitle,&#10;} from &quot;@/components/ui/alert&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;;&#10;import { Separator } from &quot;@/components/ui/separator&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import {&#10;  Sparkles,&#10;  FileText,&#10;  Lightbulb,&#10;  CheckCircle,&#10;  AlertCircle,&#10;  Loader2,&#10;  Edit3&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface EnhanceProfileSectionModalProps {&#10;  profileSection: ProfileSection;&#10;  baseJobRequirementMatches: BaseJobRequirementMatch[];&#10;  open: boolean;&#10;  onClose: () =&gt; void;&#10;  onApplyChanges: (enhancedContent: string) =&gt; void;&#10;  onKeepOriginal: () =&gt; void;&#10;}&#10;&#10;export const EnhanceProfileSectionModal: React.FC&lt;EnhanceProfileSectionModalProps&gt; = ({&#10;  profileSection,&#10;  baseJobRequirementMatches,&#10;  open,&#10;  onClose,&#10;  onApplyChanges,&#10;  onKeepOriginal,&#10;}) =&gt; {&#10;  const [enhancedContent, setEnhancedContent] = useState(&quot;&quot;);&#10;  const [enhancementsMade, setEnhancementsMade] = useState&lt;string[]&gt;([]);&#10;  const [reasoning, setReasoning] = useState&lt;string[]&gt;([]);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [triggerEnhance, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useLlmService&lt;EnhancedMatchedProfileSection&gt;(&#10;    matchedProfileSectionEnhancerService.enhanceMatchedProfileSection&#10;  );&#10;&#10;  // Fetch enhancement when modal opens&#10;  useEffect(() =&gt; {&#10;    if (open) {&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;      triggerEnhance({&#10;        profile_section: profileSection,&#10;        base_job_requirement_matches: baseJobRequirementMatches,&#10;      });&#10;    } else {&#10;      reset();&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;    }&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, profileSection, baseJobRequirementMatches]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setEnhancedContent(data.enhanced_profile_section.content);&#10;      setEnhancementsMade(data.enhancements_made);&#10;      setReasoning(data.reasoning);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to fetch enhancement');&#10;    } else if (isError) {&#10;      setError('Failed to fetch enhancement');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  const handleApplyChanges = () =&gt; {&#10;    onApplyChanges(enhancedContent);&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-[75vw] max-h-[90vh] overflow-hidden flex flex-col min-w-[75vw] min-h-[90vh]&quot;&gt;&#10;        &lt;DialogHeader className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Sparkles className=&quot;w-5 h-5 text-blue-600&quot; /&gt;&#10;            Enhance Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            AI-powered suggestions to improve your {profileSection.type} section based on job requirements.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        {isLoading ? (&#10;          &lt;div className=&quot;flex-1 space-y-4 px-1&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2 text-sm text-gray-600&quot;&gt;&#10;              &lt;Loader2 className=&quot;w-4 h-4 animate-spin&quot; /&gt;&#10;              Generating AI-powered enhancements...&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-6 h-full&quot;&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-2/3&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : error ? (&#10;          &lt;div className=&quot;flex-1 px-1&quot;&gt;&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;AlertTitle&gt;Enhancement Failed&lt;/AlertTitle&gt;&#10;              &lt;AlertDescription&gt;{error}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;flex-1 grid grid-cols-3 gap-6 overflow-hidden&quot;&gt;&#10;            {/* Left Column - Enhanced Content */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto col-span-2&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhanced Content Section */}&#10;                  &lt;Card className=&quot;h-fit&quot;&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Edit3 className=&quot;w-4 h-4 text-green-600&quot; /&gt;&#10;                        Enhanced Suggestion&#10;                        &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800&quot;&gt;&#10;                          AI Generated&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Review and edit the AI-enhanced version of your content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;Textarea&#10;                        value={enhancedContent}&#10;                        onChange={(e) =&gt; setEnhancedContent(e.target.value)}&#10;                        className=&quot;min-h-[300px] resize-none&quot;&#10;                        placeholder=&quot;Enhanced content will appear here...&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#10;                        {enhancedContent.length} characters&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;&#10;                  {/* Reasoning Section */}&#10;                  {reasoning.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600&quot; /&gt;&#10;                          AI Reasoning&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Understanding the logic behind these suggestions&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot; rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            {reasoning.map((reasonPoint, index) =&gt; (&#10;                              &lt;div key={index} className=&quot;flex items-start gap-2 bg-amber-50 border border-amber-200 rounded-lg p-4&quot;&gt;&#10;                                &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                                &lt;span className=&quot;text-sm text-amber-900 leading-relaxed&quot;&gt;&#10;                                  {reasonPoint}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Right Column - Original Content &amp; Context */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhancements Made Section */}&#10;                  {enhancementsMade.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600&quot; /&gt;&#10;                          Key Improvements&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Specific enhancements made to address job requirements&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                          {enhancementsMade.map((enhancement, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;flex items-start gap-2 p-3 bg-blue-50 rounded-lg&quot;&gt;&#10;                              &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                              &lt;span className=&quot;text-sm text-blue-900&quot;&gt;{enhancement}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;&#10;                  {/* Original Content Section */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Original Content&#10;                        &lt;/div&gt;&#10;                        &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#10;                          Reference&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Your current {profileSection.type} section content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;div className=&quot;bg-gray-50 rounded-lg p-4 border max-h-[300px] overflow-y-auto&quot;&gt;&#10;                        &lt;div className=&quot;whitespace-pre-wrap text-sm leading-relaxed&quot;&gt;&#10;                          {profileSection.content}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Job Requirements Context */}&#10;                  {baseJobRequirementMatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Matched Requirements&#10;                          &lt;Badge variant=&quot;outline&quot;&gt;{baseJobRequirementMatches.length}&lt;/Badge&gt;&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Job requirements this section addresses&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2 max-h-[200px] overflow-y-auto&quot;&gt;&#10;                          {baseJobRequirementMatches.map((match, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;text-sm p-2 bg-gray-50 rounded border-l-2 border-gray-300&quot;&gt;&#10;                              &quot;{match.requirement}&quot;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;Separator className=&quot;my-4&quot; /&gt;&#10;&#10;        &lt;DialogFooter className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex gap-3 w-full sm:w-auto&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;outline&quot;&#10;              onClick={onKeepOriginal}&#10;              disabled={isLoading}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              Keep Original&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              onClick={handleApplyChanges}&#10;              disabled={isLoading || !enhancedContent.trim()}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              {isLoading ? (&#10;                &lt;&gt;&#10;                  &lt;Loader2 className=&quot;w-4 h-4 mr-2 animate-spin&quot; /&gt;&#10;                  Processing...&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;Sparkles className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                  Apply Changes&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flow/steps/shared/prepareMatchedProfileSections.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/shared/prepareMatchedProfileSections.ts" />
              <option name="updatedContent" value="import { groupMatchesByProfileSection, MatchedProfileSection } from &quot;../groupMatchesByProfileSection&quot;;&#10;import { ProfileSection } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;&#10;export interface MatchedProfileSectionPayload {&#10;  profile_section: ProfileSection;&#10;  requirements: string[];&#10;}&#10;&#10;/**&#10; * Prepares matched profile sections payload for API calls&#10; * Used by both GenerateResumeSectionsStep and GenerateCoverLetterStep&#10; */&#10;export const prepareMatchedProfileSections = (&#10;  matches: any[],&#10;  profileSections: ProfileSection[]&#10;): MatchedProfileSectionPayload[] =&gt; {&#10;  const matchedProfileSections: MatchedProfileSection[] = groupMatchesByProfileSection(matches, profileSections);&#10;  &#10;  return matchedProfileSections.map(({ profileSection, baseJobRequirementMatches }) =&gt; ({&#10;    profile_section: profileSection,&#10;    requirements: baseJobRequirementMatches.map(match =&gt; match.requirement),&#10;  }));&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>