<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/flow/steps/generateCoverLetter/GenerateCoverLetterStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/generateCoverLetter/GenerateCoverLetterStep.tsx" />
              <option name="originalContent" value="import React, { useEffect, useMemo, useState } from &quot;react&quot;;&#10;import { useSelector, useDispatch } from &quot;react-redux&quot;;&#10;import { RootState } from &quot;@/store/store&quot;;&#10;import { getMatchedProfileSectionWithRequirements } from &quot;../shared/getMatchedProfileSectionWithRequirements&quot;;&#10;import sha1 from &quot;sha1&quot;;&#10;import {&#10;  setCoverLetter,&#10;  setOptimizationSummary,&#10;  setLastCoverLetterInputsHash,&#10;  updateCoverLetter&#10;} from &quot;@/store/slices/coverLetterSlice&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { coverLetterGeneratorService } from &quot;@/services/coverLetterGeneratorService&quot;;&#10;import { GeneratedCoverLetterResult } from &quot;@/services/zodModels&quot;;&#10;import { createStep } from &quot;@/utils/createStep&quot;;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import {&#10;  FileText,&#10;  Loader2,&#10;  AlertTriangle,&#10;  Mail&#10;} from &quot;lucide-react&quot;;&#10;import { OptimizationSummaryCard } from '../shared/OptimizationSummaryCard';&#10;import { RegenerateBanner } from '../shared/RegenerateBanner';&#10;import { CoverLetterEditorCard } from './CoverLetterEditorCard'&#10;&#10;const GenerateCoverLetter: React.FC = () =&gt; {&#10;  const dispatch = useDispatch();&#10;  const profileSections = useSelector((state: RootState) =&gt; state.profileSections.sections);&#10;  const matches = useSelector((state: RootState) =&gt; state.matches.data);&#10;  const companyContext = useSelector((state: RootState) =&gt; state.jobContext.company_context);&#10;  const jobDescription = useSelector((state: RootState) =&gt; state.jobContext.job_description);&#10;  const coverLetter = useSelector((state: RootState) =&gt; state.coverLetter.coverLetter);&#10;  const optimizationSummary = useSelector((state: RootState) =&gt; state.coverLetter.optimizationSummary);&#10;  const lastCoverLetterInputsHash = useSelector((state: RootState) =&gt; state.coverLetter.lastCoverLetterInputsHash);&#10;  const [editMode, setEditMode] = useState(false);&#10;  const [showRegenerateBanner, setShowRegenerateBanner] = useState(false);&#10;  const [copied, setCopied] = useState(false);&#10;&#10;  const [generateCoverLetter, { isLoading, error, data, reset }] = useLlmService&lt;GeneratedCoverLetterResult&gt;(&#10;    coverLetterGeneratorService.generateCoverLetter&#10;  );&#10;&#10;  // Prepare payload using the shared utility - memoize to prevent unnecessary re-computations&#10;  const apiPayload = useMemo(() =&gt; {&#10;    return {&#10;      profileSectionsWithRequirements: getMatchedProfileSectionWithRequirements(matches || [], profileSections || []),&#10;      companyContext: companyContext || &quot;&quot;,&#10;      toneGuidance: toneGuidance&#10;    };&#10;  }, [matches, profileSections, companyContext, toneGuidance]);&#10;&#10;  // Use first 2-3 sentences of job description for tone_guidance&#10;  const toneGuidance = useMemo(() =&gt; {&#10;    if (!jobDescription) return &quot;&quot;;&#10;    const sentences = jobDescription.match(/[^.!?]+[.!?]+/g) || [];&#10;    const guidanceText = sentences.slice(0, 3).join(&quot; &quot;).trim();&#10;    return guidanceText || jobDescription.slice(0, 300);&#10;  }, [jobDescription]);&#10;&#10;  // Compute hash of current inputs&#10;  const inputsHash = useMemo(&#10;    () =&gt; sha1(JSON.stringify({ profileSections, matches, companyContext, jobDescription })),&#10;    [profileSections, matches, companyContext, jobDescription]&#10;  );&#10;  const inputsChanged = inputsHash !== lastCoverLetterInputsHash;&#10;&#10;  useEffect(() =&gt; {&#10;    if (!coverLetter &amp;&amp; apiPayload.profileSectionsWithRequirements.length &gt; 0) {&#10;      generateCoverLetter(&#10;        apiPayload.profileSectionsWithRequirements,&#10;        apiPayload.companyContext,&#10;        apiPayload.toneGuidance&#10;      ).then((data) =&gt; {&#10;        if (!data) return;&#10;        dispatch(setCoverLetter(data.cover_letter_markdown || &quot;&quot;));&#10;        dispatch(setOptimizationSummary(data.optimization_summary || null));&#10;        dispatch(setLastCoverLetterInputsHash(inputsHash));&#10;      });&#10;    }&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (inputsChanged) {&#10;      setShowRegenerateBanner(true);&#10;    }&#10;  }, [inputsChanged]);&#10;&#10;  const onRegenerate = async () =&gt; {&#10;    setShowRegenerateBanner(false);&#10;    const data = await generateCoverLetter(&#10;      apiPayload.profileSectionsWithRequirements,&#10;      apiPayload.companyContext,&#10;      apiPayload.toneGuidance&#10;    );&#10;    if (data) {&#10;      dispatch(setCoverLetter(data.cover_letter_markdown || &quot;&quot;));&#10;      dispatch(setOptimizationSummary(data.optimization_summary || null));&#10;      dispatch(setLastCoverLetterInputsHash(inputsHash));&#10;    }&#10;  };&#10;&#10;  const copyToClipboard = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(coverLetter);&#10;      setCopied(true);&#10;      setTimeout(() =&gt; setCopied(false), 2000);&#10;    } catch (err) {&#10;      console.error('Failed to copy text: ', err);&#10;    }&#10;  };&#10;&#10;  const downloadMarkdown = () =&gt; {&#10;    const blob = new Blob([coverLetter], { type: &quot;text/markdown&quot; });&#10;    const url = URL.createObjectURL(blob);&#10;    const a = document.createElement(&quot;a&quot;);&#10;    a.href = url;&#10;    a.download = &quot;cover_letter.md&quot;;&#10;    a.click();&#10;    URL.revokeObjectURL(url);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;container mx-auto max-w-5xl py-8 px-4 space-y-6&quot;&gt;&#10;&#10;      {/* Regenerate Banner */}&#10;      &lt;RegenerateBanner&#10;        message=&quot;Your inputs have changed since the last cover letter generation.&quot;&#10;        show={showRegenerateBanner}&#10;        isLoading={isLoading}&#10;        onRegenerate={onRegenerate}&#10;        onDismiss={() =&gt; setShowRegenerateBanner(false)}&#10;      /&gt;&#10;&#10;      {/* Loading State */}&#10;      {isLoading &amp;&amp; (&#10;        &lt;Card&gt;&#10;          &lt;CardContent className=&quot;flex items-center justify-center py-12&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;Loader2 className=&quot;h-6 w-6 animate-spin&quot; /&gt;&#10;              &lt;span className=&quot;text-lg&quot;&gt;Generating your cover letter...&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      )}&#10;&#10;      {/* Error State */}&#10;      {error &amp;&amp; (&#10;        &lt;Alert variant=&quot;destructive&quot;&gt;&#10;          &lt;AlertTriangle className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;AlertDescription&gt;&#10;            Failed to generate cover letter. Please try again.&#10;          &lt;/AlertDescription&gt;&#10;        &lt;/Alert&gt;&#10;      )}&#10;&#10;      {/* No Cover Letter State */}&#10;      {!coverLetter &amp;&amp; !isLoading &amp;&amp; !error &amp;&amp; (&#10;        &lt;Card&gt;&#10;          &lt;CardContent className=&quot;flex items-center justify-center py-12&quot;&gt;&#10;            &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;              &lt;Mail className=&quot;h-12 w-12 mx-auto text-muted-foreground&quot; /&gt;&#10;              &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;No cover letter generated yet&lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                Complete the previous steps to generate your personalized cover letter&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      )}&#10;&#10;      {/* Cover Letter Content */}&#10;      {coverLetter &amp;&amp; !isLoading &amp;&amp; (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;&#10;          {/* Main Editor Card */}&#10;          &lt;CoverLetterEditorCard&#10;            editMode={editMode}&#10;            setEditMode={setEditMode}&#10;            copied={copied}&#10;            coverLetter={coverLetter}&#10;            dispatch={dispatch}&#10;            updateCoverLetter={updateCoverLetter}&#10;            copyToClipboard={copyToClipboard}&#10;            downloadMarkdown={downloadMarkdown}&#10;            onRegenerate={onRegenerate}&#10;            isLoading={isLoading}&#10;          /&gt;&#10;&#10;          &lt;OptimizationSummaryCard&#10;            optimizationSummary={optimizationSummary || ''}&#10;          /&gt;&#10;&#10;          {/* Help Section */}&#10;          &lt;Card className=&quot;border-dashed&quot;&gt;&#10;            &lt;CardContent className=&quot;p-6&quot;&gt;&#10;              &lt;div className=&quot;flex items-start gap-3&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 text-blue-600&quot;&gt;&#10;                  &lt;FileText className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                  &lt;h3 className=&quot;font-medium&quot;&gt;Tips for your cover letter&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Your cover letter has been tailored based on the job requirements and your profile.&#10;                    You can edit it directly or regenerate with updated information.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const GenerateCoverLetterStep = createStep({&#10;  id: &quot;generate-cover-letter&quot;,&#10;  label: &quot;Generate Cover Letter&quot;,&#10;  description: &quot;Generate a personalized cover letter tailored to the job requirements&quot;&#10;})(GenerateCoverLetter);" />
              <option name="updatedContent" value="import React, { useEffect, useMemo, useState } from &quot;react&quot;;&#10;import { useSelector, useDispatch } from &quot;react-redux&quot;;&#10;import { RootState } from &quot;@/store/store&quot;;&#10;import { getMatchedProfileSectionWithRequirements } from &quot;../shared/getMatchedProfileSectionWithRequirements&quot;;&#10;import sha1 from &quot;sha1&quot;;&#10;import {&#10;  setCoverLetter,&#10;  setOptimizationSummary,&#10;  setLastCoverLetterInputsHash,&#10;  updateCoverLetter&#10;} from &quot;@/store/slices/coverLetterSlice&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { coverLetterGeneratorService } from &quot;@/services/coverLetterGeneratorService&quot;;&#10;import { GeneratedCoverLetterResult } from &quot;@/services/zodModels&quot;;&#10;import { createStep } from &quot;@/utils/createStep&quot;;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import {&#10;  FileText,&#10;  Loader2,&#10;  AlertTriangle,&#10;  Mail&#10;} from &quot;lucide-react&quot;;&#10;import { OptimizationSummaryCard } from '../shared/OptimizationSummaryCard';&#10;import { RegenerateBanner } from '../shared/RegenerateBanner';&#10;import { CoverLetterEditorCard } from './CoverLetterEditorCard'&#10;&#10;const GenerateCoverLetter: React.FC = () =&gt; {&#10;  const dispatch = useDispatch();&#10;  const profileSections = useSelector((state: RootState) =&gt; state.profileSections.sections);&#10;  const matches = useSelector((state: RootState) =&gt; state.matches.data);&#10;  const companyContext = useSelector((state: RootState) =&gt; state.jobContext.company_context);&#10;  const jobDescription = useSelector((state: RootState) =&gt; state.jobContext.job_description);&#10;  const coverLetter = useSelector((state: RootState) =&gt; state.coverLetter.coverLetter);&#10;  const optimizationSummary = useSelector((state: RootState) =&gt; state.coverLetter.optimizationSummary);&#10;  const lastCoverLetterInputsHash = useSelector((state: RootState) =&gt; state.coverLetter.lastCoverLetterInputsHash);&#10;  const [editMode, setEditMode] = useState(false);&#10;  const [showRegenerateBanner, setShowRegenerateBanner] = useState(false);&#10;  const [copied, setCopied] = useState(false);&#10;&#10;  const [generateCoverLetter, { isLoading, error, data, reset }] = useLlmService&lt;GeneratedCoverLetterResult&gt;(&#10;    coverLetterGeneratorService.generateCoverLetter&#10;  );&#10;&#10;  // Use first 2-3 sentences of job description for tone_guidance&#10;  const toneGuidance = useMemo(() =&gt; {&#10;    if (!jobDescription) return &quot;&quot;;&#10;    const sentences = jobDescription.match(/[^.!?]+[.!?]+/g) || [];&#10;    const guidanceText = sentences.slice(0, 3).join(&quot; &quot;).trim();&#10;    return guidanceText || jobDescription.slice(0, 300);&#10;  }, [jobDescription]);&#10;&#10;  // Prepare payload using the shared utility - memoize to prevent unnecessary re-computations&#10;  const apiPayload = useMemo(() =&gt; {&#10;    return {&#10;      profileSectionsWithRequirements: getMatchedProfileSectionWithRequirements(matches || [], profileSections || []),&#10;      companyContext: companyContext || &quot;&quot;,&#10;      toneGuidance: toneGuidance&#10;    };&#10;  }, [matches, profileSections, companyContext, toneGuidance]);&#10;&#10;  // Compute hash of current inputs&#10;  const inputsHash = useMemo(&#10;    () =&gt; sha1(JSON.stringify({ profileSections, matches, companyContext, jobDescription })),&#10;    [profileSections, matches, companyContext, jobDescription]&#10;  );&#10;  const inputsChanged = inputsHash !== lastCoverLetterInputsHash;&#10;&#10;  useEffect(() =&gt; {&#10;    if (!coverLetter &amp;&amp; apiPayload.profileSectionsWithRequirements.length &gt; 0) {&#10;      generateCoverLetter(&#10;        apiPayload.profileSectionsWithRequirements,&#10;        apiPayload.companyContext,&#10;        apiPayload.toneGuidance&#10;      ).then((data) =&gt; {&#10;        if (!data) return;&#10;        dispatch(setCoverLetter(data.cover_letter_markdown || &quot;&quot;));&#10;        dispatch(setOptimizationSummary(data.optimization_summary || null));&#10;        dispatch(setLastCoverLetterInputsHash(inputsHash));&#10;      });&#10;    }&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (inputsChanged) {&#10;      setShowRegenerateBanner(true);&#10;    }&#10;  }, [inputsChanged]);&#10;&#10;  const onRegenerate = async () =&gt; {&#10;    setShowRegenerateBanner(false);&#10;    const data = await generateCoverLetter(&#10;      apiPayload.profileSectionsWithRequirements,&#10;      apiPayload.companyContext,&#10;      apiPayload.toneGuidance&#10;    );&#10;    if (data) {&#10;      dispatch(setCoverLetter(data.cover_letter_markdown || &quot;&quot;));&#10;      dispatch(setOptimizationSummary(data.optimization_summary || null));&#10;      dispatch(setLastCoverLetterInputsHash(inputsHash));&#10;    }&#10;  };&#10;&#10;  const copyToClipboard = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(coverLetter);&#10;      setCopied(true);&#10;      setTimeout(() =&gt; setCopied(false), 2000);&#10;    } catch (err) {&#10;      console.error('Failed to copy text: ', err);&#10;    }&#10;  };&#10;&#10;  const downloadMarkdown = () =&gt; {&#10;    const blob = new Blob([coverLetter], { type: &quot;text/markdown&quot; });&#10;    const url = URL.createObjectURL(blob);&#10;    const a = document.createElement(&quot;a&quot;);&#10;    a.href = url;&#10;    a.download = &quot;cover_letter.md&quot;;&#10;    a.click();&#10;    URL.revokeObjectURL(url);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;container mx-auto max-w-5xl py-8 px-4 space-y-6&quot;&gt;&#10;&#10;      {/* Regenerate Banner */}&#10;      &lt;RegenerateBanner&#10;        message=&quot;Your inputs have changed since the last cover letter generation.&quot;&#10;        show={showRegenerateBanner}&#10;        isLoading={isLoading}&#10;        onRegenerate={onRegenerate}&#10;        onDismiss={() =&gt; setShowRegenerateBanner(false)}&#10;      /&gt;&#10;&#10;      {/* Loading State */}&#10;      {isLoading &amp;&amp; (&#10;        &lt;Card&gt;&#10;          &lt;CardContent className=&quot;flex items-center justify-center py-12&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;Loader2 className=&quot;h-6 w-6 animate-spin&quot; /&gt;&#10;              &lt;span className=&quot;text-lg&quot;&gt;Generating your cover letter...&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      )}&#10;&#10;      {/* Error State */}&#10;      {error &amp;&amp; (&#10;        &lt;Alert variant=&quot;destructive&quot;&gt;&#10;          &lt;AlertTriangle className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;AlertDescription&gt;&#10;            Failed to generate cover letter. Please try again.&#10;          &lt;/AlertDescription&gt;&#10;        &lt;/Alert&gt;&#10;      )}&#10;&#10;      {/* No Cover Letter State */}&#10;      {!coverLetter &amp;&amp; !isLoading &amp;&amp; !error &amp;&amp; (&#10;        &lt;Card&gt;&#10;          &lt;CardContent className=&quot;flex items-center justify-center py-12&quot;&gt;&#10;            &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;              &lt;Mail className=&quot;h-12 w-12 mx-auto text-muted-foreground&quot; /&gt;&#10;              &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;No cover letter generated yet&lt;/p&gt;&#10;              &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                Complete the previous steps to generate your personalized cover letter&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      )}&#10;&#10;      {/* Cover Letter Content */}&#10;      {coverLetter &amp;&amp; !isLoading &amp;&amp; (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;&#10;          {/* Main Editor Card */}&#10;          &lt;CoverLetterEditorCard&#10;            editMode={editMode}&#10;            setEditMode={setEditMode}&#10;            copied={copied}&#10;            coverLetter={coverLetter}&#10;            dispatch={dispatch}&#10;            updateCoverLetter={updateCoverLetter}&#10;            copyToClipboard={copyToClipboard}&#10;            downloadMarkdown={downloadMarkdown}&#10;            onRegenerate={onRegenerate}&#10;            isLoading={isLoading}&#10;          /&gt;&#10;&#10;          &lt;OptimizationSummaryCard&#10;            optimizationSummary={optimizationSummary || ''}&#10;          /&gt;&#10;&#10;          {/* Help Section */}&#10;          &lt;Card className=&quot;border-dashed&quot;&gt;&#10;            &lt;CardContent className=&quot;p-6&quot;&gt;&#10;              &lt;div className=&quot;flex items-start gap-3&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 text-blue-600&quot;&gt;&#10;                  &lt;FileText className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                  &lt;h3 className=&quot;font-medium&quot;&gt;Tips for your cover letter&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Your cover letter has been tailored based on the job requirements and your profile.&#10;                    You can edit it directly or regenerate with updated information.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const GenerateCoverLetterStep = createStep({&#10;  id: &quot;generate-cover-letter&quot;,&#10;  label: &quot;Generate Cover Letter&quot;,&#10;  description: &quot;Generate a personalized cover letter tailored to the job requirements&quot;&#10;})(GenerateCoverLetter);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flow/steps/generateEditResume/GenerateEditResumeStep.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/generateEditResume/GenerateEditResumeStep.tsx" />
              <option name="originalContent" value="import React, { useEffect, useMemo, useState, useRef } from &quot;react&quot;;&#10;import { useSelector, useDispatch } from &quot;react-redux&quot;;&#10;import { RootState } from &quot;@/store/store&quot;;&#10;import { ResumeSection } from &quot;@/store/slices/resumeSectionsSlice&quot;;&#10;import {&#10;  setResume,&#10;  setOptimizationSummary,&#10;  setLastResumeInputsHash,&#10;  updateResume&#10;} from &quot;@/store/slices/resumeSlice&quot;;&#10;import { useGenerateResumeMutation } from &quot;@/store/services/llmApi&quot;;&#10;import jsPDF from &quot;jspdf&quot;;&#10;import sha1 from &quot;sha1&quot;;&#10;import { createStep } from &quot;@/utils/createStep&quot;;&#10;import { RegenerateBanner } from '../shared/RegenerateBanner';&#10;import { OptimizationSummaryCard } from '../shared/OptimizationSummaryCard';&#10;import {&#10;  FileText,&#10;  Loader2,&#10;  AlertTriangle,&#10;  Edit3,&#10;  Download,&#10;  FileDown,&#10;  Save,&#10;  RotateCcw,&#10;  Eye,&#10;  Check&#10;} from &quot;lucide-react&quot;;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;&#10;const GenerateEditResume: React.FC = () =&gt; {&#10;  const dispatch = useDispatch();&#10;  const resumeSections = useSelector((state: RootState) =&gt; state.resumeSections.resumeSections || []);&#10;  const resume = useSelector((state: RootState) =&gt; state.resume.resume);&#10;  const optimizationSummary = useSelector((state: RootState) =&gt; state.resume.optimizationSummary);&#10;  const lastResumeInputsHash = useSelector((state: RootState) =&gt; state.resume.lastResumeInputsHash);&#10;  const [editMode, setEditMode] = useState(false);&#10;  const [isExportingPdf, setIsExportingPdf] = useState(false);&#10;  const [showRegenerateBanner, setShowRegenerateBanner] = useState(false);&#10;  const [draftSaved, setDraftSaved] = useState(false);&#10;  const [editedResume, setEditedResume] = useState(&quot;&quot;);&#10;&#10;  const markdownContentRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const [triggerGenerateResume, { isLoading, error }] = useGenerateResumeMutation();&#10;&#10;  const apiPayload = resumeSections.map(s =&gt; ({ type: s.type, content: s.content }));&#10;&#10;  const inputsHash = useMemo(&#10;    () =&gt; sha1(JSON.stringify({ resumeSections })),&#10;    [resumeSections]&#10;  );&#10;  const inputsChanged = inputsHash !== lastResumeInputsHash;&#10;&#10;  const convertToMarkdown = (data: any) =&gt; {&#10;    const resume = data.data.resume;&#10;    let md = &quot;&quot;;&#10;    if (resume.summary) md += `${resume.summary}\n\n---\n\n`;&#10;    if (resume.experience) md += `${resume.experience}\n\n---\n\n`;&#10;    if (resume.skills) md += `${resume.skills}\n\n---\n\n`;&#10;    if (resume.education) md += `${resume.education}\n\n---\n\n`;&#10;    if (resume.certifications) md += `${resume.certifications}\n\n---\n\n`;&#10;    if (resume.projects) md += `${resume.projects}\n\n---\n\n`;&#10;    if (resume.achievements) md += `${resume.achievements}\n\n---\n\n`;&#10;    if (resume.volunteering) md += `${resume.volunteering}\n\n---\n\n`;&#10;    if (resume.language) md += `${resume.language}\n\n---\n\n`;&#10;    return md.trim();&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (!resume &amp;&amp; resumeSections.length &gt; 0) {&#10;      triggerGenerateResume({ sections: apiPayload })&#10;        .unwrap()&#10;        .then((data) =&gt; {&#10;          const markdown = convertToMarkdown(data);&#10;          dispatch(setResume(markdown));&#10;          setEditedResume(markdown);&#10;          dispatch(setOptimizationSummary(data.data.optimization_summary || null));&#10;          dispatch(setLastResumeInputsHash(inputsHash));&#10;        });&#10;    }&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (resume &amp;&amp; !editedResume) {&#10;      setEditedResume(resume);&#10;    }&#10;  }, [resume]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (inputsChanged) {&#10;      setShowRegenerateBanner(true);&#10;    }&#10;  }, [inputsChanged]);&#10;&#10;  const onRegenerate = async () =&gt; {&#10;    setShowRegenerateBanner(false);&#10;    await triggerGenerateResume({ sections: apiPayload })&#10;      .unwrap()&#10;      .then((data) =&gt; {&#10;        const markdown = convertToMarkdown(data);&#10;        dispatch(setResume(markdown));&#10;        setEditedResume(markdown);&#10;        dispatch(setOptimizationSummary(data.data.optimization_summary || null));&#10;        dispatch(setLastResumeInputsHash(inputsHash));&#10;      });&#10;  };&#10;&#10;  const saveDraft = () =&gt; {&#10;    dispatch(updateResume(editedResume));&#10;    setDraftSaved(true);&#10;    setTimeout(() =&gt; setDraftSaved(false), 2000);&#10;  };&#10;&#10;  const exportMarkdown = () =&gt; {&#10;    const content = editMode ? editedResume : resume;&#10;    const blob = new Blob([content], { type: &quot;text/markdown&quot; });&#10;    const url = URL.createObjectURL(blob);&#10;    const a = document.createElement(&quot;a&quot;);&#10;    a.href = url;&#10;    a.download = &quot;resume.md&quot;;&#10;    a.click();&#10;    URL.revokeObjectURL(url);&#10;  };&#10;&#10;  const exportPdf = async () =&gt; {&#10;    if (!markdownContentRef.current) return;&#10;    setIsExportingPdf(true);&#10;    try {&#10;      const element = markdownContentRef.current;&#10;      if (!element) return;&#10;&#10;      const doc = new jsPDF({&#10;        unit: &quot;pt&quot;,&#10;        format: &quot;letter&quot;,&#10;        orientation: &quot;portrait&quot;,&#10;        compress: true&#10;      });&#10;&#10;      doc.setProperties({&#10;        title: &quot;Resume&quot;,&#10;        subject: &quot;Professional Resume&quot;,&#10;        author: &quot;Resume Generator&quot;&#10;      });&#10;&#10;      const margin = { top: 50, left: 50, right: 50, bottom: 50 };&#10;&#10;      await doc.html(element, {&#10;        x: margin.left,&#10;        y: margin.top,&#10;        html2canvas: {&#10;          scale: 1,&#10;          useCORS: true,&#10;          letterRendering: true,&#10;          allowTaint: false&#10;        },&#10;        autoPaging: true,&#10;        width: doc.internal.pageSize.getWidth() - margin.left - margin.right,&#10;        callback: (pdf) =&gt; pdf.save(&quot;resume.pdf&quot;),&#10;      });&#10;    } catch (err) {&#10;      console.error(err);&#10;    } finally {&#10;      setIsExportingPdf(false);&#10;    }&#10;  };&#10;&#10;  const renderMarkdown = (content: string) =&gt; {&#10;    return content&#10;      .split('\n')&#10;      .map((line, index) =&gt; {&#10;        if (line.startsWith('## ')) {&#10;          return (&#10;            &lt;h2 key={index} className=&quot;text-2xl font-bold text-gray-900 mb-4 mt-6 first:mt-0 border-b border-gray-200 pb-2&quot;&gt;&#10;              {line.substring(3)}&#10;            &lt;/h2&gt;&#10;          );&#10;        } else if (line === '---') {&#10;          return &lt;div key={index} className=&quot;my-6&quot; /&gt;;&#10;        } else if (line.trim()) {&#10;          return (&#10;            &lt;p key={index} className=&quot;text-gray-700 leading-relaxed mb-3&quot;&gt;&#10;              {line}&#10;            &lt;/p&gt;&#10;          );&#10;        }&#10;        return &lt;br key={index} /&gt;;&#10;      });&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full h-full bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;w-full&quot;&gt;&#10;        {/* Regenerate Banner */}&#10;        &lt;RegenerateBanner&#10;          show={showRegenerateBanner}&#10;          isLoading={isLoading}&#10;          onRegenerate={onRegenerate}&#10;          onDismiss={() =&gt; setShowRegenerateBanner(false)}&#10;          message=&quot;Your resume inputs have changed and may be outdated.&quot;&#10;        /&gt;&#10;&#10;        &lt;div className=&quot;flex gap-8 py-6&quot;&gt;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#10;            {!resume &amp;&amp; !isLoading &amp;&amp; !error &amp;&amp; (&#10;              &lt;Card className=&quot;shadow-sm&quot;&gt;&#10;                &lt;CardContent className=&quot;flex items-center justify-center py-20&quot;&gt;&#10;                  &lt;div className=&quot;text-center space-y-6&quot;&gt;&#10;                    &lt;FileText className=&quot;h-16 w-16 mx-auto text-gray-400&quot; /&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;No resume generated yet&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                      Add some resume sections to get started&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            )}&#10;&#10;            {/* Loading State */}&#10;            {isLoading &amp;&amp; (&#10;              &lt;Card className=&quot;shadow-sm&quot;&gt;&#10;                &lt;CardContent className=&quot;flex items-center justify-center py-12&quot;&gt;&#10;                  &lt;div className=&quot;flex flex-col items-center space-y-4&quot;&gt;&#10;                    &lt;Loader2 className=&quot;h-8 w-8 animate-spin text-blue-600&quot; /&gt;&#10;                    &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Generating resume...&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            )}&#10;&#10;            {/* Error State */}&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#10;                &lt;Alert variant=&quot;destructive&quot;&gt;&#10;                  &lt;AlertTriangle className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;AlertDescription&gt;&#10;                    Failed to generate resume. Please try again.&#10;                  &lt;/AlertDescription&gt;&#10;                &lt;/Alert&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {resume &amp;&amp; !isLoading &amp;&amp; (&#10;              &lt;Card className=&quot;shadow-sm min-h-[800px]&quot;&gt;&#10;                &lt;CardHeader className=&quot;pb-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-xl font-semibold&quot;&gt;Your Resume&lt;/CardTitle&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; setEditMode(!editMode)}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {editMode ? &lt;Eye className=&quot;h-4 w-4&quot; /&gt; : &lt;Edit3 className=&quot;h-4 w-4&quot; /&gt;}&#10;                        &lt;span&gt;{editMode ? 'Preview' : 'Edit'}&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;&#10;                      {editMode &amp;&amp; (&#10;                        &lt;Button&#10;                          variant=&quot;outline&quot;&#10;                          size=&quot;sm&quot;&#10;                          onClick={saveDraft}&#10;                          className=&quot;flex items-center space-x-2&quot;&#10;                          disabled={draftSaved}&#10;                        &gt;&#10;                          {draftSaved ? &lt;Check className=&quot;h-4 w-4&quot; /&gt; : &lt;Save className=&quot;h-4 w-4&quot; /&gt;}&#10;                          &lt;span&gt;{draftSaved ? 'Saved' : 'Save'}&lt;/span&gt;&#10;                        &lt;/Button&gt;&#10;                      )}&#10;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={exportMarkdown}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        &lt;FileDown className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;span&gt;Markdown&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;&#10;                      {/* &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={exportPdf}&#10;                        disabled={isExportingPdf}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {isExportingPdf ? (&#10;                          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;&#10;                        ) : (&#10;                          &lt;Download className=&quot;h-4 w-4&quot; /&gt;&#10;                        )}&#10;                        &lt;span&gt;PDF&lt;/span&gt;&#10;                      &lt;/Button&gt; */}&#10;&#10;                      &lt;Button&#10;                        size=&quot;sm&quot;&#10;                        onClick={onRegenerate}&#10;                        disabled={isLoading}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {isLoading ? (&#10;                          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;&#10;                        ) : (&#10;                          &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                        )}&#10;                        &lt;span&gt;Regenerate&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent className=&quot;px-8 pt-0 pb-8&quot;&gt;&#10;                  {editMode ? (&#10;                    &lt;Textarea&#10;                      value={editedResume}&#10;                      onChange={(e) =&gt; setEditedResume(e.target.value)}&#10;                      className=&quot;w-full h-[800px] font-mono text-sm resize-none border-0 p-4 focus:ring-0 bg-gray-50 rounded-md&quot;&#10;                      placeholder=&quot;Edit your resume in Markdown format...&quot;&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;div&#10;                      ref={markdownContentRef}&#10;                      className=&quot;prose prose-lg max-w-none&quot;&#10;                      style={{&#10;                        lineHeight: '1.7',&#10;                        color: '#374151',&#10;                      }}&#10;                    &gt;&#10;                      {renderMarkdown(editMode ? editedResume : resume)}&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            )}&#10;&#10;            {optimizationSummary &amp;&amp; (&#10;              &lt;div className=&quot;mt-6&quot;&gt;&#10;                &lt;OptimizationSummaryCard optimizationSummary={optimizationSummary} /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const GenerateEditResumeStep = createStep({&#10;  id: &quot;generate-edit-resume&quot;,&#10;  label: &quot;Generate &amp; Edit Resume&quot;,&#10;  description: &quot;Generate, edit, and export your professional resume&quot;&#10;})(GenerateEditResume);" />
              <option name="updatedContent" value="import React, { useEffect, useMemo, useState, useRef } from &quot;react&quot;;&#10;import { useSelector, useDispatch } from &quot;react-redux&quot;;&#10;import { RootState } from &quot;@/store/store&quot;;&#10;import { ResumeSection } from &quot;@/store/slices/resumeSectionsSlice&quot;;&#10;import {&#10;  setResume,&#10;  setOptimizationSummary,&#10;  setLastResumeInputsHash,&#10;  updateResume&#10;} from &quot;@/store/slices/resumeSlice&quot;;&#10;import { ResumeOutput, ResumeSection } from &quot;@/services/zodModels&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { resumeGeneratorService } from &quot;@/services/resumeGeneratorService&quot;;&#10;import jsPDF from &quot;jspdf&quot;;&#10;import sha1 from &quot;sha1&quot;;&#10;import { createStep } from &quot;@/utils/createStep&quot;;&#10;import { RegenerateBanner } from '../shared/RegenerateBanner';&#10;import { OptimizationSummaryCard } from '../shared/OptimizationSummaryCard';&#10;import {&#10;  FileText,&#10;  Loader2,&#10;  AlertTriangle,&#10;  Edit3,&#10;  Download,&#10;  FileDown,&#10;  Save,&#10;  RotateCcw,&#10;  Eye,&#10;  Check&#10;} from &quot;lucide-react&quot;;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;&#10;const GenerateEditResume: React.FC = () =&gt; {&#10;  const dispatch = useDispatch();&#10;  const resumeSections = useSelector((state: RootState) =&gt; state.resumeSections.resumeSections || []);&#10;  const resume = useSelector((state: RootState) =&gt; state.resume.resume);&#10;  const optimizationSummary = useSelector((state: RootState) =&gt; state.resume.optimizationSummary);&#10;  const lastResumeInputsHash = useSelector((state: RootState) =&gt; state.resume.lastResumeInputsHash);&#10;  const [editMode, setEditMode] = useState(false);&#10;  const [isExportingPdf, setIsExportingPdf] = useState(false);&#10;  const [showRegenerateBanner, setShowRegenerateBanner] = useState(false);&#10;  const [draftSaved, setDraftSaved] = useState(false);&#10;  const [editedResume, setEditedResume] = useState(&quot;&quot;);&#10;&#10;  const markdownContentRef = useRef&lt;HTMLDivElement&gt;(null);&#10;  const [triggerGenerateResume, { isLoading, error, data, reset }] = useLlmService&lt;ResumeOutput&gt;(&#10;    resumeGeneratorService.buildResume&#10;  );&#10;&#10;  const apiPayload: ResumeSection[] = resumeSections.map(s =&gt; ({ type: s.type, content: s.content }));&#10;&#10;  const inputsHash = useMemo(&#10;    () =&gt; sha1(JSON.stringify({ resumeSections })),&#10;    [resumeSections]&#10;  );&#10;  const inputsChanged = inputsHash !== lastResumeInputsHash;&#10;&#10;  const convertToMarkdown = (data: ResumeOutput) =&gt; {&#10;    const resume = data.resume;&#10;    let md = &quot;&quot;;&#10;    if (resume.summary) md += `${resume.summary}\n\n---\n\n`;&#10;    if (resume.experience) md += `${resume.experience}\n\n---\n\n`;&#10;    if (resume.skills) md += `${resume.skills}\n\n---\n\n`;&#10;    if (resume.education) md += `${resume.education}\n\n---\n\n`;&#10;    if (resume.certifications) md += `${resume.certifications}\n\n---\n\n`;&#10;    if (resume.projects) md += `${resume.projects}\n\n---\n\n`;&#10;    if (resume.achievements) md += `${resume.achievements}\n\n---\n\n`;&#10;    if (resume.volunteering) md += `${resume.volunteering}\n\n---\n\n`;&#10;    if (resume.languages) md += `${resume.languages}\n\n---\n\n`;&#10;    return md.trim();&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    if (!resume &amp;&amp; resumeSections.length &gt; 0) {&#10;      triggerGenerateResume(apiPayload)&#10;        .then((data) =&gt; {&#10;          if (!data) return;&#10;          const markdown = convertToMarkdown(data);&#10;          dispatch(setResume(markdown));&#10;          setEditedResume(markdown);&#10;          dispatch(setOptimizationSummary(data.optimization_summary || null));&#10;          dispatch(setLastResumeInputsHash(inputsHash));&#10;        });&#10;    }&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (resume &amp;&amp; !editedResume) {&#10;      setEditedResume(resume);&#10;    }&#10;  }, [resume]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (inputsChanged) {&#10;      setShowRegenerateBanner(true);&#10;    }&#10;  }, [inputsChanged]);&#10;&#10;  const onRegenerate = async () =&gt; {&#10;    setShowRegenerateBanner(false);&#10;    const data = await triggerGenerateResume(apiPayload);&#10;    if (data) {&#10;      const markdown = convertToMarkdown(data);&#10;      dispatch(setResume(markdown));&#10;      setEditedResume(markdown);&#10;      dispatch(setOptimizationSummary(data.optimization_summary || null));&#10;      dispatch(setLastResumeInputsHash(inputsHash));&#10;    }&#10;  };&#10;&#10;  const saveDraft = () =&gt; {&#10;    dispatch(updateResume(editedResume));&#10;    setDraftSaved(true);&#10;    setTimeout(() =&gt; setDraftSaved(false), 2000);&#10;  };&#10;&#10;  const exportMarkdown = () =&gt; {&#10;    const content = editMode ? editedResume : resume;&#10;    const blob = new Blob([content], { type: &quot;text/markdown&quot; });&#10;    const url = URL.createObjectURL(blob);&#10;    const a = document.createElement(&quot;a&quot;);&#10;    a.href = url;&#10;    a.download = &quot;resume.md&quot;;&#10;    a.click();&#10;    URL.revokeObjectURL(url);&#10;  };&#10;&#10;  const exportPdf = async () =&gt; {&#10;    if (!markdownContentRef.current) return;&#10;    setIsExportingPdf(true);&#10;    try {&#10;      const element = markdownContentRef.current;&#10;      if (!element) return;&#10;&#10;      const doc = new jsPDF({&#10;        unit: &quot;pt&quot;,&#10;        format: &quot;letter&quot;,&#10;        orientation: &quot;portrait&quot;,&#10;        compress: true&#10;      });&#10;&#10;      doc.setProperties({&#10;        title: &quot;Resume&quot;,&#10;        subject: &quot;Professional Resume&quot;,&#10;        author: &quot;Resume Generator&quot;&#10;      });&#10;&#10;      const margin = { top: 50, left: 50, right: 50, bottom: 50 };&#10;&#10;      await doc.html(element, {&#10;        x: margin.left,&#10;        y: margin.top,&#10;        html2canvas: {&#10;          scale: 1,&#10;          useCORS: true,&#10;          letterRendering: true,&#10;          allowTaint: false&#10;        },&#10;        autoPaging: true,&#10;        width: doc.internal.pageSize.getWidth() - margin.left - margin.right,&#10;        callback: (pdf) =&gt; pdf.save(&quot;resume.pdf&quot;),&#10;      });&#10;    } catch (err) {&#10;      console.error(err);&#10;    } finally {&#10;      setIsExportingPdf(false);&#10;    }&#10;  };&#10;&#10;  const renderMarkdown = (content: string) =&gt; {&#10;    return content&#10;      .split('\n')&#10;      .map((line, index) =&gt; {&#10;        if (line.startsWith('## ')) {&#10;          return (&#10;            &lt;h2 key={index} className=&quot;text-2xl font-bold text-gray-900 mb-4 mt-6 first:mt-0 border-b border-gray-200 pb-2&quot;&gt;&#10;              {line.substring(3)}&#10;            &lt;/h2&gt;&#10;          );&#10;        } else if (line === '---') {&#10;          return &lt;div key={index} className=&quot;my-6&quot; /&gt;;&#10;        } else if (line.trim()) {&#10;          return (&#10;            &lt;p key={index} className=&quot;text-gray-700 leading-relaxed mb-3&quot;&gt;&#10;              {line}&#10;            &lt;/p&gt;&#10;          );&#10;        }&#10;        return &lt;br key={index} /&gt;;&#10;      });&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;w-full h-full bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;w-full&quot;&gt;&#10;        {/* Regenerate Banner */}&#10;        &lt;RegenerateBanner&#10;          show={showRegenerateBanner}&#10;          isLoading={isLoading}&#10;          onRegenerate={onRegenerate}&#10;          onDismiss={() =&gt; setShowRegenerateBanner(false)}&#10;          message=&quot;Your resume inputs have changed and may be outdated.&quot;&#10;        /&gt;&#10;&#10;        &lt;div className=&quot;flex gap-8 py-6&quot;&gt;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#10;            {!resume &amp;&amp; !isLoading &amp;&amp; !error &amp;&amp; (&#10;              &lt;Card className=&quot;shadow-sm&quot;&gt;&#10;                &lt;CardContent className=&quot;flex items-center justify-center py-20&quot;&gt;&#10;                  &lt;div className=&quot;text-center space-y-6&quot;&gt;&#10;                    &lt;FileText className=&quot;h-16 w-16 mx-auto text-gray-400&quot; /&gt;&#10;                    &lt;h3 className=&quot;text-lg font-medium text-gray-900&quot;&gt;No resume generated yet&lt;/h3&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                      Add some resume sections to get started&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            )}&#10;&#10;            {/* Loading State */}&#10;            {isLoading &amp;&amp; (&#10;              &lt;Card className=&quot;shadow-sm&quot;&gt;&#10;                &lt;CardContent className=&quot;flex items-center justify-center py-12&quot;&gt;&#10;                  &lt;div className=&quot;flex flex-col items-center space-y-4&quot;&gt;&#10;                    &lt;Loader2 className=&quot;h-8 w-8 animate-spin text-blue-600&quot; /&gt;&#10;                    &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Generating resume...&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            )}&#10;&#10;            {/* Error State */}&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;mb-6&quot;&gt;&#10;                &lt;Alert variant=&quot;destructive&quot;&gt;&#10;                  &lt;AlertTriangle className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;AlertDescription&gt;&#10;                    Failed to generate resume. Please try again.&#10;                  &lt;/AlertDescription&gt;&#10;                &lt;/Alert&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {resume &amp;&amp; !isLoading &amp;&amp; (&#10;              &lt;Card className=&quot;shadow-sm min-h-[800px]&quot;&gt;&#10;                &lt;CardHeader className=&quot;pb-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-xl font-semibold&quot;&gt;Your Resume&lt;/CardTitle&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; setEditMode(!editMode)}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {editMode ? &lt;Eye className=&quot;h-4 w-4&quot; /&gt; : &lt;Edit3 className=&quot;h-4 w-4&quot; /&gt;}&#10;                        &lt;span&gt;{editMode ? 'Preview' : 'Edit'}&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;&#10;                      {editMode &amp;&amp; (&#10;                        &lt;Button&#10;                          variant=&quot;outline&quot;&#10;                          size=&quot;sm&quot;&#10;                          onClick={saveDraft}&#10;                          className=&quot;flex items-center space-x-2&quot;&#10;                          disabled={draftSaved}&#10;                        &gt;&#10;                          {draftSaved ? &lt;Check className=&quot;h-4 w-4&quot; /&gt; : &lt;Save className=&quot;h-4 w-4&quot; /&gt;}&#10;                          &lt;span&gt;{draftSaved ? 'Saved' : 'Save'}&lt;/span&gt;&#10;                        &lt;/Button&gt;&#10;                      )}&#10;&#10;                      &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={exportMarkdown}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        &lt;FileDown className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;span&gt;Markdown&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;&#10;                      {/* &lt;Button&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        onClick={exportPdf}&#10;                        disabled={isExportingPdf}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {isExportingPdf ? (&#10;                          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;&#10;                        ) : (&#10;                          &lt;Download className=&quot;h-4 w-4&quot; /&gt;&#10;                        )}&#10;                        &lt;span&gt;PDF&lt;/span&gt;&#10;                      &lt;/Button&gt; */}&#10;&#10;                      &lt;Button&#10;                        size=&quot;sm&quot;&#10;                        onClick={onRegenerate}&#10;                        disabled={isLoading}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {isLoading ? (&#10;                          &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;&#10;                        ) : (&#10;                          &lt;RotateCcw className=&quot;h-4 w-4&quot; /&gt;&#10;                        )}&#10;                        &lt;span&gt;Regenerate&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/CardHeader&gt;&#10;                &lt;CardContent className=&quot;px-8 pt-0 pb-8&quot;&gt;&#10;                  {editMode ? (&#10;                    &lt;Textarea&#10;                      value={editedResume}&#10;                      onChange={(e) =&gt; setEditedResume(e.target.value)}&#10;                      className=&quot;w-full h-[800px] font-mono text-sm resize-none border-0 p-4 focus:ring-0 bg-gray-50 rounded-md&quot;&#10;                      placeholder=&quot;Edit your resume in Markdown format...&quot;&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;div&#10;                      ref={markdownContentRef}&#10;                      className=&quot;prose prose-lg max-w-none&quot;&#10;                      style={{&#10;                        lineHeight: '1.7',&#10;                        color: '#374151',&#10;                      }}&#10;                    &gt;&#10;                      {renderMarkdown(editMode ? editedResume : resume)}&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/CardContent&gt;&#10;              &lt;/Card&gt;&#10;            )}&#10;&#10;            {optimizationSummary &amp;&amp; (&#10;              &lt;div className=&quot;mt-6&quot;&gt;&#10;                &lt;OptimizationSummaryCard optimizationSummary={optimizationSummary} /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export const GenerateEditResumeStep = createStep({&#10;  id: &quot;generate-edit-resume&quot;,&#10;  label: &quot;Generate &amp; Edit Resume&quot;,&#10;  description: &quot;Generate, edit, and export your professional resume&quot;&#10;})(GenerateEditResume);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flow/steps/jobRequirementsMatching/suggestedSectionModal/SuggestedSectionModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/jobRequirementsMatching/suggestedSectionModal/SuggestedSectionModal.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useSuggestProfileSectionMutation } from &quot;@/store/services/llmApi&quot;;&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogDescription,&#10;  DialogFooter,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import {&#10;&#10;  FileText,&#10;} from &quot;lucide-react&quot;;&#10;import { GeneratedSectionArea } from './GeneratedSectionArea';&#10;import { LoadingState } from &quot;./LoadingState&quot;;&#10;import { Sidebar } from &quot;./Sidebar&quot;;&#10;import { ModalFooter } from &quot;./ModalFooter&quot;;&#10;import { sectionTypes, SectionTypeEnum } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { Match } from &quot;@/store/slices/matchesSlice&quot;;&#10;&#10;interface ProfileSection {&#10;  id: string;&#10;  type: string;&#10;  content: string;&#10;}&#10;&#10;interface SuggestedSectionModalProps {&#10;  match: Match;&#10;  open: boolean;&#10;  orderedMatchedProfileSections: ProfileSection[];&#10;  onClose: () =&gt; void;&#10;  onSaveAndMatch: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSaveOnly: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSkip: () =&gt; void;&#10;}&#10;&#10;&#10;&#10;export const SuggestedSectionModal: React.FC&lt;SuggestedSectionModalProps&gt; = ({&#10;  match,&#10;  open,&#10;  orderedMatchedProfileSections,&#10;  onClose,&#10;  onSaveAndMatch,&#10;  onSaveOnly,&#10;  onSkip,&#10;}) =&gt; {&#10;  const [type, setType] = useState&lt;SectionTypeEnum&gt;(sectionTypes[0]);&#10;  const [content, setContent] = useState(&quot;&quot;);&#10;  const [baseId, setBaseId] = useState&lt;string | null&gt;(null);&#10;  const [summaryOfChanges, setSummaryOfChanges] = useState&lt;string&gt;(&quot;&quot;);&#10;  const [isBaseSectionOpen, setIsBaseSectionOpen] = useState(false);&#10;  const [isSummaryOpen, setIsSummaryOpen] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Advanced features state&#10;  const [useAutoSelection, setUseAutoSelection] = useState(true);&#10;  const [selectedProfileSectionId, setSelectedProfileSectionId] = useState&lt;string | null&gt;(null);&#10;  const [customHint, setCustomHint] = useState(&quot;&quot;);&#10;&#10;  // Use mutation similar to triggerEnhance pattern&#10;  const [triggerSuggest, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useSuggestProfileSectionMutation();&#10;  // Use mutation similar to triggerEnhance pattern&#10;  const [triggerSuggest, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useSuggestProfileSectionMutation();&#10;    profile_sections: useAutoSelection&#10;      ? orderedMatchedProfileSections.slice(0, 3) // Top 3 for API optimization&#10;      : selectedProfileSectionId&#10;        ? orderedMatchedProfileSections.filter(ps =&gt; ps.id === selectedProfileSectionId)&#10;        : [],&#10;    gap_description: match.gap_description,&#10;    profile_sections: useAutoSelection&#10;      ? orderedMatchedProfileSections.slice(0, 3) // Top 3 for API optimization&#10;  });&#10;&#10;  // Trigger suggestion when modal opens&#10;  useEffect(() =&gt; {&#10;    if (open) {&#10;    gap_description: match.gap_description,&#10;    custom_hint: customHint || undefined,&#10;      setSummaryOfChanges(&quot;&quot;);&#10;      setError(null);&#10;&#10;      const queryPayload = prepareQueryPayload();&#10;&#10;      // Only trigger if we have valid data&#10;      if (queryPayload.profile_sections.length &gt; 0) {&#10;        triggerSuggest(queryPayload);&#10;      }&#10;    } else {&#10;      reset();&#10;      setType(sectionTypes[0]);&#10;      setContent(&quot;&quot;);&#10;      setBaseId(null);&#10;      if (queryPayload.profile_sections.length &gt; 0) {&#10;        triggerSuggest(queryPayload);&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, orderedMatchedProfileSections, match]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setBaseId(data.base_profile_section_id);&#10;      setType((data.suggested_profile_section.type as SectionTypeEnum) || sectionTypes[0]);&#10;      setContent(data.suggested_profile_section.content || &quot;&quot;);&#10;      setSummaryOfChanges(data.summary_of_changes || &quot;&quot;);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to generate suggestion');&#10;    } else if (isError) {&#10;      setError('Failed to generate suggestion');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  // Reset selected base when switching to auto mode&#10;  useEffect(() =&gt; {&#10;    if (useAutoSelection) {&#10;      setSelectedProfileSectionId(null);&#10;    }&#10;  }, [useAutoSelection]);&#10;&#10;  const handleRegenerateClick = () =&gt; {&#10;    const queryPayload = prepareQueryPayload();&#10;&#10;    if (queryPayload.profile_sections.length &gt; 0) {&#10;      setError(null);&#10;      triggerSuggest(queryPayload);&#10;    }&#10;  };&#10;&#10;  function getErrorMessage(error: any): string {&#10;    if (!error) return &quot;&quot;;&#10;    if (typeof error === &quot;string&quot;) return error;&#10;    if (error.status &amp;&amp; error.data &amp;&amp; typeof error.data === &quot;string&quot;)&#10;      return error.data;&#10;    if (error.message) return error.message;&#10;    return &quot;An error occurred.&quot;;&#10;  }&#10;    if (queryPayload.profile_sections.length &gt; 0) {&#10;  const baseSection = baseId&#10;    ? orderedMatchedProfileSections.find((s) =&gt; s.id === baseId)&#10;    : null;&#10;&#10;  const isEditing = !!baseSection;&#10;  const matchBtnLabel = isEditing ? &quot;Update &amp; Match&quot; : &quot;Add &amp; Match&quot;;&#10;  const onlyBtnLabel = isEditing ? &quot;Update Only&quot; : &quot;Add Only&quot;;&#10;      triggerSuggest(queryPayload);&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;FileText className=&quot;h-6 w-6&quot; /&gt; Suggested Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            We've generated a profile section to better match the job requirements. &#10;            Review and customize it below.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;flex-1 flex flex-col min-h-0 overflow-auto&quot;&gt;&#10;          {isLoading ? (&#10;            &lt;LoadingState /&gt;&#10;          ) : error ? (&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertDescription&gt;{getErrorMessage(error)}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex flex-col h-full lg:flex-row min-h-0 &quot;&gt; &#10;              {/* Left Content Area */}&#10;              &lt;div className=&quot;lg:w-2/3 flex flex-col&quot;&gt;&#10;                &lt;GeneratedSectionArea&#10;                  content={content}&#10;                  setContent={setContent}&#10;                  contentLength={contentLength}&#10;                  wordCount={wordCount}&#10;                  isEditing={isEditing}&#10;                  type={type}&#10;                  setType={setType}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {/* Right Sidebar */}&#10;              &lt;div className=&quot;lg:w-1/3 flex flex-col mt-6 lg:mt-0 lg:ml-6&quot;&gt;&#10;                &lt;div className=&quot;flex-1 space-y-4 py-1 min-h-0&quot;&gt;&#10;                  &lt;Sidebar&#10;                    requirement={match.requirement}&#10;                    type={type}&#10;                    setType={setType}&#10;                    isEditing={isEditing}&#10;                    summaryOfChanges={summaryOfChanges}&#10;                    isSummaryOpen={isSummaryOpen}&#10;                    setIsSummaryOpen={setIsSummaryOpen}&#10;                    baseSection={baseSection}&#10;                    isBaseSectionOpen={isBaseSectionOpen}&#10;                    setIsBaseSectionOpen={setIsBaseSectionOpen}&#10;                    profileSections={orderedMatchedProfileSections}&#10;                    useAutoSelection={useAutoSelection}&#10;                    setUseAutoSelection={setUseAutoSelection}&#10;                    selectedProfileSectionId={selectedProfileSectionId}&#10;                    setSelectedProfileSectionId={setSelectedProfileSectionId}&#10;                    customHint={customHint}&#10;                    setCustomHint={setCustomHint}&#10;                    onRegenerateClick={handleRegenerateClick}&#10;                    isLoading={isLoading}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;DialogFooter className=&quot;mt-4 flex-shrink-0 flex items-center gap-3&quot;&gt;&#10;          &lt;ModalFooter&#10;            isLoading={isLoading}&#10;            onSkip={onSkip}&#10;            isEditing={isEditing}&#10;            baseId={baseId}&#10;            onSaveOnly={onSaveOnly}&#10;            onSaveAndMatch={onSaveAndMatch}&#10;            type={type}&#10;            content={content}&#10;            onlyBtnLabel={onlyBtnLabel}&#10;            matchBtnLabel={matchBtnLabel}&#10;            disabled={isLoading || !content.trim()}&#10;          /&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { profileSectionSuggestionService } from &quot;@/services/profileSectionSuggestionService&quot;;&#10;import { ProfileSectionSuggestion } from &quot;@/services/zodModels&quot;;&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogHeader,&#10;  DialogTitle,&#10;  DialogDescription,&#10;  DialogFooter,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;&#10;import { Alert, AlertDescription } from &quot;@/components/ui/alert&quot;;&#10;import {&#10;&#10;  FileText,&#10;} from &quot;lucide-react&quot;;&#10;import { GeneratedSectionArea } from './GeneratedSectionArea';&#10;import { LoadingState } from &quot;./LoadingState&quot;;&#10;import { Sidebar } from &quot;./Sidebar&quot;;&#10;import { ModalFooter } from &quot;./ModalFooter&quot;;&#10;import { sectionTypes, SectionTypeEnum } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { Match } from &quot;@/store/slices/matchesSlice&quot;;&#10;&#10;interface ProfileSection {&#10;  id: string;&#10;  type: string;&#10;  content: string;&#10;}&#10;&#10;interface SuggestedSectionModalProps {&#10;  match: Match;&#10;  open: boolean;&#10;  orderedMatchedProfileSections: ProfileSection[];&#10;  onClose: () =&gt; void;&#10;  onSaveAndMatch: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSaveOnly: (section: {&#10;    type: SectionTypeEnum;&#10;    content: string;&#10;    baseId: string;&#10;  }) =&gt; void;&#10;  onSkip: () =&gt; void;&#10;}&#10;&#10;&#10;&#10;export const SuggestedSectionModal: React.FC&lt;SuggestedSectionModalProps&gt; = ({&#10;  match,&#10;  open,&#10;  orderedMatchedProfileSections,&#10;  onClose,&#10;  onSaveAndMatch,&#10;  onSaveOnly,&#10;  onSkip,&#10;}) =&gt; {&#10;  const [type, setType] = useState&lt;SectionTypeEnum&gt;(sectionTypes[0]);&#10;  const [content, setContent] = useState(&quot;&quot;);&#10;  const [baseId, setBaseId] = useState&lt;string | null&gt;(null);&#10;  const [summaryOfChanges, setSummaryOfChanges] = useState&lt;string&gt;(&quot;&quot;);&#10;  const [isBaseSectionOpen, setIsBaseSectionOpen] = useState(false);&#10;  const [isSummaryOpen, setIsSummaryOpen] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  // Advanced features state&#10;  const [useAutoSelection, setUseAutoSelection] = useState(true);&#10;  const [selectedProfileSectionId, setSelectedProfileSectionId] = useState&lt;string | null&gt;(null);&#10;  const [customHint, setCustomHint] = useState(&quot;&quot;);&#10;&#10;  // Use LLM service hook for suggestion&#10;  const [triggerSuggest, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useLlmService&lt;ProfileSectionSuggestion&gt;(&#10;    profileSectionSuggestionService.suggestProfileSection&#10;  );&#10;&#10;  // Helper function to prepare query payload&#10;  const prepareQueryPayload = () =&gt; ({&#10;    requirement: match.requirement,&#10;    profileSections: useAutoSelection&#10;      ? orderedMatchedProfileSections.slice(0, 3)&#10;      : selectedProfileSectionId&#10;        ? orderedMatchedProfileSections.filter(ps =&gt; ps.id === selectedProfileSectionId)&#10;        : [],&#10;    gapDescription: match.gap_description,&#10;    customHint: customHint || undefined,&#10;    recommendation: match.recommendation,&#10;  });&#10;&#10;  // Trigger suggestion when modal opens&#10;  useEffect(() =&gt; {&#10;    if (open) {&#10;      setContent(&quot;&quot;);&#10;      setBaseId(null);&#10;      setSummaryOfChanges(&quot;&quot;);&#10;      setError(null);&#10;&#10;      const queryPayload = prepareQueryPayload();&#10;&#10;      // Only trigger if we have valid data&#10;      if (queryPayload.profileSections.length &gt; 0) {&#10;        triggerSuggest(&#10;          queryPayload.requirement,&#10;          queryPayload.profileSections,&#10;          queryPayload.gapDescription,&#10;          queryPayload.recommendation,&#10;          queryPayload.customHint&#10;        );&#10;      }&#10;    } else {&#10;      reset();&#10;      setType(sectionTypes[0]);&#10;      setContent(&quot;&quot;);&#10;      setBaseId(null);&#10;      setSummaryOfChanges(&quot;&quot;);&#10;      setIsBaseSectionOpen(false);&#10;      setIsSummaryOpen(true);&#10;      setUseAutoSelection(true);&#10;      setSelectedProfileSectionId(null);&#10;      setCustomHint(&quot;&quot;);&#10;      setError(null);&#10;    }&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, orderedMatchedProfileSections, match]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setBaseId(data.base_profile_section_id);&#10;      setType((data.suggested_profile_section.type as SectionTypeEnum) || sectionTypes[0]);&#10;      setContent(data.suggested_profile_section.content || &quot;&quot;);&#10;      setSummaryOfChanges(data.summary_of_changes || &quot;&quot;);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to generate suggestion');&#10;    } else if (isError) {&#10;      setError('Failed to generate suggestion');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  // Reset selected base when switching to auto mode&#10;  useEffect(() =&gt; {&#10;    if (useAutoSelection) {&#10;      setSelectedProfileSectionId(null);&#10;    }&#10;  }, [useAutoSelection]);&#10;&#10;  const handleRegenerateClick = () =&gt; {&#10;    const queryPayload = prepareQueryPayload();&#10;&#10;    if (queryPayload.profileSections.length &gt; 0) {&#10;      setError(null);&#10;      triggerSuggest(&#10;        queryPayload.requirement,&#10;        queryPayload.profileSections,&#10;        queryPayload.gapDescription,&#10;        queryPayload.recommendation,&#10;        queryPayload.customHint&#10;      );&#10;    }&#10;  };&#10;&#10;  function getErrorMessage(error: any): string {&#10;    if (!error) return &quot;&quot;;&#10;    if (typeof error === &quot;string&quot;) return error;&#10;    if (error.status &amp;&amp; error.data &amp;&amp; typeof error.data === &quot;string&quot;)&#10;      return error.data;&#10;    if (error.message) return error.message;&#10;    return &quot;An error occurred.&quot;;&#10;  }&#10;&#10;  const baseSection = baseId&#10;    ? orderedMatchedProfileSections.find((s) =&gt; s.id === baseId)&#10;    : null;&#10;&#10;  const isEditing = !!baseSection;&#10;  const matchBtnLabel = isEditing ? &quot;Update &amp; Match&quot; : &quot;Add &amp; Match&quot;;&#10;  const onlyBtnLabel = isEditing ? &quot;Update Only&quot; : &quot;Add Only&quot;;&#10;  const contentLength = content.length;&#10;  const wordCount = content.trim().split(/\s+/).filter(word =&gt; word.length &gt; 0).length;&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-[90rem] max-h-[90vh] flex flex-col min-w-[75vw] min-h-[90vh]&quot;&gt;&#10;        &lt;DialogHeader className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;FileText className=&quot;h-6 w-6&quot; /&gt; Suggested Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            We've generated a profile section to better match the job requirements. &#10;            Review and customize it below.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        &lt;div className=&quot;flex-1 flex flex-col min-h-0 overflow-auto&quot;&gt;&#10;          {isLoading ? (&#10;            &lt;LoadingState /&gt;&#10;          ) : error ? (&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertDescription&gt;{getErrorMessage(error)}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          ) : (&#10;            &lt;div className=&quot;flex flex-col h-full lg:flex-row min-h-0 &quot;&gt; &#10;              {/* Left Content Area */}&#10;              &lt;div className=&quot;lg:w-2/3 flex flex-col&quot;&gt;&#10;                &lt;GeneratedSectionArea&#10;                  content={content}&#10;                  setContent={setContent}&#10;                  contentLength={contentLength}&#10;                  wordCount={wordCount}&#10;                  isEditing={isEditing}&#10;                  type={type}&#10;                  setType={setType}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              {/* Right Sidebar */}&#10;              &lt;div className=&quot;lg:w-1/3 flex flex-col mt-6 lg:mt-0 lg:ml-6&quot;&gt;&#10;                &lt;div className=&quot;flex-1 space-y-4 py-1 min-h-0&quot;&gt;&#10;                  &lt;Sidebar&#10;                    requirement={match.requirement}&#10;                    type={type}&#10;                    setType={setType}&#10;                    isEditing={isEditing}&#10;                    summaryOfChanges={summaryOfChanges}&#10;                    isSummaryOpen={isSummaryOpen}&#10;                    setIsSummaryOpen={setIsSummaryOpen}&#10;                    baseSection={baseSection}&#10;                    isBaseSectionOpen={isBaseSectionOpen}&#10;                    setIsBaseSectionOpen={setIsBaseSectionOpen}&#10;                    profileSections={orderedMatchedProfileSections}&#10;                    useAutoSelection={useAutoSelection}&#10;                    setUseAutoSelection={setUseAutoSelection}&#10;                    selectedProfileSectionId={selectedProfileSectionId}&#10;                    setSelectedProfileSectionId={setSelectedProfileSectionId}&#10;                    customHint={customHint}&#10;                    setCustomHint={setCustomHint}&#10;                    onRegenerateClick={handleRegenerateClick}&#10;                    isLoading={isLoading}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;DialogFooter className=&quot;mt-4 flex-shrink-0 flex items-center gap-3&quot;&gt;&#10;          &lt;ModalFooter&#10;            isLoading={isLoading}&#10;            onSkip={onSkip}&#10;            isEditing={isEditing}&#10;            baseId={baseId}&#10;            onSaveOnly={onSaveOnly}&#10;            onSaveAndMatch={onSaveAndMatch}&#10;            type={type}&#10;            content={content}&#10;            onlyBtnLabel={onlyBtnLabel}&#10;            matchBtnLabel={matchBtnLabel}&#10;            disabled={isLoading || !content.trim()}&#10;          /&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flow/steps/profileSectionAnalysis/EnhanceProfileSectionModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/profileSectionAnalysis/EnhanceProfileSectionModal.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { ProfileSection } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { useEnhanceMatchedProfileSectionMutation, EnhancementResponse, BaseJobRequirementMatch } from &quot;@/store/services/llmApi&quot;;&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {&#10;  Card,&#10;  CardContent,&#10;  CardDescription,&#10;  CardHeader,&#10;  CardTitle,&#10;} from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Alert,&#10;  AlertDescription,&#10;  AlertTitle,&#10;} from &quot;@/components/ui/alert&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;;&#10;import { Separator } from &quot;@/components/ui/separator&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import {&#10;  Sparkles,&#10;  FileText,&#10;  Lightbulb,&#10;  CheckCircle,&#10;  AlertCircle,&#10;  Loader2,&#10;  Edit3&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface EnhanceProfileSectionModalProps {&#10;  profileSection: ProfileSection;&#10;  baseJobRequirementMatches: BaseJobRequirementMatch[];&#10;  open: boolean;&#10;  onClose: () =&gt; void;&#10;  onApplyChanges: (enhancedContent: string) =&gt; void;&#10;  onKeepOriginal: () =&gt; void;&#10;}&#10;&#10;export const EnhanceProfileSectionModal: React.FC&lt;EnhanceProfileSectionModalProps&gt; = ({&#10;  profileSection,&#10;  baseJobRequirementMatches,&#10;  open,&#10;  onClose,&#10;  onApplyChanges,&#10;  onKeepOriginal,&#10;}) =&gt; {&#10;  const [enhancedContent, setEnhancedContent] = useState(&quot;&quot;);&#10;  const [enhancementsMade, setEnhancementsMade] = useState&lt;string[]&gt;([]);&#10;  const [reasoning, setReasoning] = useState&lt;string[]&gt;([]);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [triggerEnhance, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useEnhanceMatchedProfileSectionMutation();&#10;&#10;  const [triggerEnhance, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useEnhanceMatchedProfileSectionMutation();&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;      triggerEnhance({&#10;        profile_section: profileSection,&#10;        base_job_requirement_matches: baseJobRequirementMatches,&#10;      });&#10;    } else {&#10;      reset();&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;    }&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, profileSection, baseJobRequirementMatches]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setEnhancedContent(data.enhanced_profile_section.content);&#10;      setEnhancementsMade(data.enhancements_made);&#10;      setReasoning(data.reasoning);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to fetch enhancement');&#10;    } else if (isError) {&#10;      setError('Failed to fetch enhancement');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  const handleApplyChanges = () =&gt; {&#10;    onApplyChanges(enhancedContent);&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-[75vw] max-h-[90vh] overflow-hidden flex flex-col min-w-[75vw] min-h-[90vh]&quot;&gt;&#10;        &lt;DialogHeader className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Sparkles className=&quot;w-5 h-5 text-blue-600&quot; /&gt;&#10;            Enhance Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            AI-powered suggestions to improve your {profileSection.type} section based on job requirements.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        {isLoading ? (&#10;          &lt;div className=&quot;flex-1 space-y-4 px-1&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2 text-sm text-gray-600&quot;&gt;&#10;              &lt;Loader2 className=&quot;w-4 h-4 animate-spin&quot; /&gt;&#10;              Generating AI-powered enhancements...&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-6 h-full&quot;&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-2/3&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : error ? (&#10;          &lt;div className=&quot;flex-1 px-1&quot;&gt;&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;AlertTitle&gt;Enhancement Failed&lt;/AlertTitle&gt;&#10;              &lt;AlertDescription&gt;{error}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;flex-1 grid grid-cols-3 gap-6 overflow-hidden&quot;&gt;&#10;            {/* Left Column - Enhanced Content */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto col-span-2&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhanced Content Section */}&#10;                  &lt;Card className=&quot;h-fit&quot;&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Edit3 className=&quot;w-4 h-4 text-green-600&quot; /&gt;&#10;                        Enhanced Suggestion&#10;                        &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800&quot;&gt;&#10;                          AI Generated&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Review and edit the AI-enhanced version of your content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;Textarea&#10;                        value={enhancedContent}&#10;                        onChange={(e) =&gt; setEnhancedContent(e.target.value)}&#10;                        className=&quot;min-h-[300px] resize-none&quot;&#10;                        placeholder=&quot;Enhanced content will appear here...&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#10;                        {enhancedContent.length} characters&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;&#10;                  {/* Reasoning Section */}&#10;                  {reasoning.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600&quot; /&gt;&#10;                          AI Reasoning&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Understanding the logic behind these suggestions&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot; rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            {reasoning.map((reasonPoint, index) =&gt; (&#10;                              &lt;div key={index} className=&quot;flex items-start gap-2 bg-amber-50 border border-amber-200 rounded-lg p-4&quot;&gt;&#10;                                &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                                &lt;span className=&quot;text-sm text-amber-900 leading-relaxed&quot;&gt;&#10;                                  {reasonPoint}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Right Column - Original Content &amp; Context */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhancements Made Section */}&#10;                  {enhancementsMade.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600&quot; /&gt;&#10;                          Key Improvements&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Specific enhancements made to address job requirements&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                          {enhancementsMade.map((enhancement, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;flex items-start gap-2 p-3 bg-blue-50 rounded-lg&quot;&gt;&#10;                              &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                              &lt;span className=&quot;text-sm text-blue-900&quot;&gt;{enhancement}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;&#10;                  {/* Original Content Section */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Original Content&#10;                        &lt;/div&gt;&#10;                        &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#10;                          Reference&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Your current {profileSection.type} section content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;div className=&quot;bg-gray-50 rounded-lg p-4 border max-h-[300px] overflow-y-auto&quot;&gt;&#10;                        &lt;div className=&quot;whitespace-pre-wrap text-sm leading-relaxed&quot;&gt;&#10;                          {profileSection.content}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Job Requirements Context */}&#10;                  {baseJobRequirementMatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Matched Requirements&#10;                          &lt;Badge variant=&quot;outline&quot;&gt;{baseJobRequirementMatches.length}&lt;/Badge&gt;&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Job requirements this section addresses&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2 max-h-[200px] overflow-y-auto&quot;&gt;&#10;                          {baseJobRequirementMatches.map((match, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;text-sm p-2 bg-gray-50 rounded border-l-2 border-gray-300&quot;&gt;&#10;                              &quot;{match.requirement}&quot;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;Separator className=&quot;my-4&quot; /&gt;&#10;&#10;        &lt;DialogFooter className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex gap-3 w-full sm:w-auto&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;outline&quot;&#10;              onClick={onKeepOriginal}&#10;              disabled={isLoading}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              Keep Original&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              onClick={handleApplyChanges}&#10;              disabled={isLoading || !enhancedContent.trim()}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              {isLoading ? (&#10;                &lt;&gt;&#10;                  &lt;Loader2 className=&quot;w-4 h-4 mr-2 animate-spin&quot; /&gt;&#10;                  Processing...&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;Sparkles className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                  Apply Changes&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};" />
              <option name="updatedContent" value="import React, { useState, useEffect } from &quot;react&quot;;&#10;import { ProfileSection } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;import { useLlmService } from &quot;@/hooks/useLlmService&quot;;&#10;import { matchedProfileSectionEnhancerService } from &quot;@/services/matchedProfileSectionEnhancerService&quot;;&#10;import { EnhancedMatchedProfileSection } from &quot;@/services/zodModels&quot;;&#10;import {&#10;  Dialog,&#10;  DialogContent,&#10;  DialogDescription,&#10;  DialogFooter,&#10;  DialogHeader,&#10;  DialogTitle,&#10;} from &quot;@/components/ui/dialog&quot;;&#10;import {&#10;  Card,&#10;  CardContent,&#10;  CardDescription,&#10;  CardHeader,&#10;  CardTitle,&#10;} from &quot;@/components/ui/card&quot;;&#10;import {&#10;  Alert,&#10;  AlertDescription,&#10;  AlertTitle,&#10;} from &quot;@/components/ui/alert&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Textarea } from &quot;@/components/ui/textarea&quot;;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;;&#10;import { Separator } from &quot;@/components/ui/separator&quot;;&#10;import { Skeleton } from &quot;@/components/ui/skeleton&quot;;&#10;import {&#10;  Sparkles,&#10;  FileText,&#10;  Lightbulb,&#10;  CheckCircle,&#10;  AlertCircle,&#10;  Loader2,&#10;  Edit3&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface EnhanceProfileSectionModalProps {&#10;  profileSection: ProfileSection;&#10;  baseJobRequirementMatches: BaseJobRequirementMatch[];&#10;  open: boolean;&#10;  onClose: () =&gt; void;&#10;  onApplyChanges: (enhancedContent: string) =&gt; void;&#10;  onKeepOriginal: () =&gt; void;&#10;}&#10;&#10;export const EnhanceProfileSectionModal: React.FC&lt;EnhanceProfileSectionModalProps&gt; = ({&#10;  profileSection,&#10;  baseJobRequirementMatches,&#10;  open,&#10;  onClose,&#10;  onApplyChanges,&#10;  onKeepOriginal,&#10;}) =&gt; {&#10;  const [enhancedContent, setEnhancedContent] = useState(&quot;&quot;);&#10;  const [enhancementsMade, setEnhancementsMade] = useState&lt;string[]&gt;([]);&#10;  const [reasoning, setReasoning] = useState&lt;string[]&gt;([]);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [triggerEnhance, { data, isLoading, isError, error: apiError, isSuccess, reset }] = useLlmService&lt;EnhancedMatchedProfileSection&gt;(&#10;    matchedProfileSectionEnhancerService.enhanceMatchedProfileSection&#10;  );&#10;&#10;  // Fetch enhancement when modal opens&#10;  useEffect(() =&gt; {&#10;    if (open) {&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;      triggerEnhance({&#10;        profile_section: profileSection,&#10;        base_job_requirement_matches: baseJobRequirementMatches,&#10;      });&#10;    } else {&#10;      reset();&#10;      setEnhancedContent(&quot;&quot;);&#10;      setEnhancementsMade([]);&#10;      setReasoning([]);&#10;      setError(null);&#10;    }&#10;    // eslint-disable-next-line react-hooks/exhaustive-deps&#10;  }, [open, profileSection, baseJobRequirementMatches]);&#10;&#10;  // Update state when data is received&#10;  useEffect(() =&gt; {&#10;    if (data) {&#10;      setEnhancedContent(data.enhanced_profile_section.content);&#10;      setEnhancementsMade(data.enhancements_made);&#10;      setReasoning(data.reasoning);&#10;    }&#10;  }, [data]);&#10;&#10;  // Handle error&#10;  useEffect(() =&gt; {&#10;    if (isError &amp;&amp; apiError &amp;&amp; 'message' in apiError) {&#10;      setError((apiError as any).message || 'Failed to fetch enhancement');&#10;    } else if (isError) {&#10;      setError('Failed to fetch enhancement');&#10;    }&#10;  }, [isError, apiError]);&#10;&#10;  const handleApplyChanges = () =&gt; {&#10;    onApplyChanges(enhancedContent);&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={open} onOpenChange={onClose}&gt;&#10;      &lt;DialogContent className=&quot;max-w-[75vw] max-h-[90vh] overflow-hidden flex flex-col min-w-[75vw] min-h-[90vh]&quot;&gt;&#10;        &lt;DialogHeader className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;DialogTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Sparkles className=&quot;w-5 h-5 text-blue-600&quot; /&gt;&#10;            Enhance Profile Section&#10;          &lt;/DialogTitle&gt;&#10;          &lt;DialogDescription&gt;&#10;            AI-powered suggestions to improve your {profileSection.type} section based on job requirements.&#10;          &lt;/DialogDescription&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        {isLoading ? (&#10;          &lt;div className=&quot;flex-1 space-y-4 px-1&quot;&gt;&#10;            &lt;div className=&quot;flex items-center gap-2 text-sm text-gray-600&quot;&gt;&#10;              &lt;Loader2 className=&quot;w-4 h-4 animate-spin&quot; /&gt;&#10;              Generating AI-powered enhancements...&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-6 h-full&quot;&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-2/3&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;space-y-3&quot;&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-full&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-4 w-3/4&quot; /&gt;&#10;                &lt;Skeleton className=&quot;h-32 w-full&quot; /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : error ? (&#10;          &lt;div className=&quot;flex-1 px-1&quot;&gt;&#10;            &lt;Alert variant=&quot;destructive&quot;&gt;&#10;              &lt;AlertCircle className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;AlertTitle&gt;Enhancement Failed&lt;/AlertTitle&gt;&#10;              &lt;AlertDescription&gt;{error}&lt;/AlertDescription&gt;&#10;            &lt;/Alert&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;flex-1 grid grid-cols-3 gap-6 overflow-hidden&quot;&gt;&#10;            {/* Left Column - Enhanced Content */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto col-span-2&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhanced Content Section */}&#10;                  &lt;Card className=&quot;h-fit&quot;&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Edit3 className=&quot;w-4 h-4 text-green-600&quot; /&gt;&#10;                        Enhanced Suggestion&#10;                        &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800&quot;&gt;&#10;                          AI Generated&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Review and edit the AI-enhanced version of your content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;Textarea&#10;                        value={enhancedContent}&#10;                        onChange={(e) =&gt; setEnhancedContent(e.target.value)}&#10;                        className=&quot;min-h-[300px] resize-none&quot;&#10;                        placeholder=&quot;Enhanced content will appear here...&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;mt-2 text-xs text-gray-500&quot;&gt;&#10;                        {enhancedContent.length} characters&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;&#10;                  {/* Reasoning Section */}&#10;                  {reasoning.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600&quot; /&gt;&#10;                          AI Reasoning&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Understanding the logic behind these suggestions&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot; rounded-lg&quot;&gt;&#10;                          &lt;div className=&quot;space-y-3&quot;&gt;&#10;                            {reasoning.map((reasonPoint, index) =&gt; (&#10;                              &lt;div key={index} className=&quot;flex items-start gap-2 bg-amber-50 border border-amber-200 rounded-lg p-4&quot;&gt;&#10;                                &lt;Lightbulb className=&quot;w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                                &lt;span className=&quot;text-sm text-amber-900 leading-relaxed&quot;&gt;&#10;                                  {reasonPoint}&#10;                                &lt;/span&gt;&#10;                              &lt;/div&gt;&#10;                            ))}&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Right Column - Original Content &amp; Context */}&#10;            &lt;div className=&quot;flex flex-col space-y-4 min-h-0 overflow-auto&quot;&gt;&#10;              &lt;ScrollArea className=&quot;flex-1 pr-4&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  {/* Enhancements Made Section */}&#10;                  {enhancementsMade.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600&quot; /&gt;&#10;                          Key Improvements&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Specific enhancements made to address job requirements&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2&quot;&gt;&#10;                          {enhancementsMade.map((enhancement, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;flex items-start gap-2 p-3 bg-blue-50 rounded-lg&quot;&gt;&#10;                              &lt;CheckCircle className=&quot;w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0&quot; /&gt;&#10;                              &lt;span className=&quot;text-sm text-blue-900&quot;&gt;{enhancement}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;&#10;                  {/* Original Content Section */}&#10;                  &lt;Card&gt;&#10;                    &lt;CardHeader&gt;&#10;                      &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Original Content&#10;                        &lt;/div&gt;&#10;                        &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#10;                          Reference&#10;                        &lt;/Badge&gt;&#10;                      &lt;/CardTitle&gt;&#10;                      &lt;CardDescription&gt;&#10;                        Your current {profileSection.type} section content&#10;                      &lt;/CardDescription&gt;&#10;                    &lt;/CardHeader&gt;&#10;                    &lt;CardContent&gt;&#10;                      &lt;div className=&quot;bg-gray-50 rounded-lg p-4 border max-h-[300px] overflow-y-auto&quot;&gt;&#10;                        &lt;div className=&quot;whitespace-pre-wrap text-sm leading-relaxed&quot;&gt;&#10;                          {profileSection.content}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/CardContent&gt;&#10;                  &lt;/Card&gt;&#10;&#10;                  {/* Job Requirements Context */}&#10;                  {baseJobRequirementMatches.length &gt; 0 &amp;&amp; (&#10;                    &lt;Card&gt;&#10;                      &lt;CardHeader&gt;&#10;                        &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;                          &lt;FileText className=&quot;w-4 h-4 text-gray-600&quot; /&gt;&#10;                          Matched Requirements&#10;                          &lt;Badge variant=&quot;outline&quot;&gt;{baseJobRequirementMatches.length}&lt;/Badge&gt;&#10;                        &lt;/CardTitle&gt;&#10;                        &lt;CardDescription&gt;&#10;                          Job requirements this section addresses&#10;                        &lt;/CardDescription&gt;&#10;                      &lt;/CardHeader&gt;&#10;                      &lt;CardContent&gt;&#10;                        &lt;div className=&quot;space-y-2 max-h-[200px] overflow-y-auto&quot;&gt;&#10;                          {baseJobRequirementMatches.map((match, index) =&gt; (&#10;                            &lt;div key={index} className=&quot;text-sm p-2 bg-gray-50 rounded border-l-2 border-gray-300&quot;&gt;&#10;                              &quot;{match.requirement}&quot;&#10;                            &lt;/div&gt;&#10;                          ))}&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/ScrollArea&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;Separator className=&quot;my-4&quot; /&gt;&#10;&#10;        &lt;DialogFooter className=&quot;flex-shrink-0&quot;&gt;&#10;          &lt;div className=&quot;flex gap-3 w-full sm:w-auto&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;outline&quot;&#10;              onClick={onKeepOriginal}&#10;              disabled={isLoading}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              Keep Original&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              onClick={handleApplyChanges}&#10;              disabled={isLoading || !enhancedContent.trim()}&#10;              className=&quot;flex-1 sm:flex-none&quot;&#10;            &gt;&#10;              {isLoading ? (&#10;                &lt;&gt;&#10;                  &lt;Loader2 className=&quot;w-4 h-4 mr-2 animate-spin&quot; /&gt;&#10;                  Processing...&#10;                &lt;/&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;Sparkles className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                  Apply Changes&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogFooter&gt;&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flow/steps/shared/prepareMatchedProfileSections.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flow/steps/shared/prepareMatchedProfileSections.ts" />
              <option name="updatedContent" value="import { groupMatchesByProfileSection, MatchedProfileSection } from &quot;../groupMatchesByProfileSection&quot;;&#10;import { ProfileSection } from &quot;@/store/slices/profileSectionsSlice&quot;;&#10;&#10;export interface MatchedProfileSectionPayload {&#10;  profile_section: ProfileSection;&#10;  requirements: string[];&#10;}&#10;&#10;/**&#10; * Prepares matched profile sections payload for API calls&#10; * Used by both GenerateResumeSectionsStep and GenerateCoverLetterStep&#10; */&#10;export const prepareMatchedProfileSections = (&#10;  matches: any[],&#10;  profileSections: ProfileSection[]&#10;): MatchedProfileSectionPayload[] =&gt; {&#10;  const matchedProfileSections: MatchedProfileSection[] = groupMatchesByProfileSection(matches, profileSections);&#10;  &#10;  return matchedProfileSections.map(({ profileSection, baseJobRequirementMatches }) =&gt; ({&#10;    profile_section: profileSection,&#10;    requirements: baseJobRequirementMatches.map(match =&gt; match.requirement),&#10;  }));&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/resumeGeneratorService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/resumeGeneratorService.ts" />
              <option name="originalContent" value="import { ChatPromptTemplate } from &quot;@langchain/core/prompts&quot;;&#10;import { llmService } from &quot;./llmService&quot;;&#10;import {&#10;  ResumeOutputSchema,&#10;  ResumeOutput,&#10;  ResumeSection,&#10;} from &quot;./zodModels&quot;;&#10;&#10;export class ResumeGeneratorService {&#10;  constructor() {&#10;    this._buildSectionsContent = this._buildSectionsContent.bind(this);&#10;    this.buildResume = this.buildResume.bind(this);&#10;  }&#10;  /**&#10;   * Service for organizing pre-formatted resume sections into a structured resume document using LLM&#10;   */&#10;  async buildResume(&#10;    resumeSections: ResumeSection[],&#10;    llmConfig?: any&#10;  ): Promise&lt;ResumeOutput&gt; {&#10;    const prompt = ChatPromptTemplate.fromTemplate(`&#10;      You are a Senior Resume Architect and Document Organizer specializing in structuring pre-formatted resume sections into cohesive, professionally organized resumes.&#10;      &#10;      ## Mission&#10;      Your mission is to organize and structure already-formatted resume sections into a complete resume document. You must:&#10;      - Group sections by type (combine multiple experience sections, multiple skills sections, etc.)&#10;      - Apply standard resume ordering (Summary → Experience → Skills → Education → Projects → Certifications, etc.)&#10;      - Add appropriate section headers in markdown format&#10;      - Preserve all content exactly as provided - NO content editing or modification&#10;      - Create logical document flow and professional structure&#10;      &#10;      ## Input Data&#10;      **PRE-FORMATTED RESUME SECTIONS**: Each section is already optimized, formatted, and contains preserved requirement matches from previous processing steps.&#10;      &#10;      {sections_content}&#10;      &#10;      ## Organization Framework&#10;      &#10;      ### Section Consolidation Rules&#10;      **CRITICAL: PRESERVE ALL CONTENT EXACTLY**&#10;      - Combine sections of the same type by concatenating content&#10;      - Maintain original formatting, bullet points, and structure&#10;      - Preserve company names, dates, and all specific details exactly as provided&#10;      - Do not modify, edit, or rephrase any content&#10;      &#10;      ### Standard Resume Structure&#10;      **SECTION ORDERING (when sections are present):**&#10;      1. Summary/Profile (if available)&#10;      2. Experience (most important, always include if present)&#10;      3. Skills (technical and soft skills)&#10;      4. Education &#10;      5. Projects&#10;      6. Certifications&#10;      7. Achievements/Awards&#10;      8. Volunteering&#10;      9. Languages&#10;      &#10;      ### Header Application&#10;      - Add markdown headers: ## Summary, ## Experience, ## Skills, etc.&#10;      - Use exact section names that match content type&#10;      - Maintain clean, professional markdown formatting&#10;      &#10;      ### Quality Standards&#10;      - **Content Preservation**: Zero modification of section content&#10;      - **Logical Organization**: Professional resume flow and structure&#10;      - **Header Consistency**: Standard markdown formatting throughout&#10;      - **Section Completeness**: Include all provided sections in appropriate locations&#10;      &#10;      Organize the sections into a complete, professionally structured resume document.&#10;    `);&#10;&#10;    const sections_content = this._buildSectionsContent(resumeSections);&#10;&#10;    try {&#10;      const result = await llmService.invokeWithStructuredOutput(&#10;        prompt,&#10;        ResumeOutputSchema,&#10;        { sections_content },&#10;        llmConfig&#10;      );&#10;      return result;&#10;    } catch (e) {&#10;      // Fallback: return a minimal ResumeOutput with error message&#10;      console.error(&quot;[ERROR] buildResume failed:&quot;, e);&#10;      return {&#10;        resume: [],&#10;        optimization_summary: `Error occurred during resume organization - no structural changes applied`&#10;      };&#10;    }&#10;  };&#10;&#10;  private _buildSectionsContent(resumeSections: ResumeSection[]): string {&#10;    return resumeSections&#10;      .map(&#10;        (section) =&gt;&#10;          `Section Type: ${section.type}\nPre-Formatted Content: ${section.content}\n--- END SECTION ---\n`&#10;      )&#10;      .join(&quot;\n&quot;);&#10;  }&#10;}&#10;&#10;export const resumeGeneratorService = new ResumeGeneratorService();&#10;" />
              <option name="updatedContent" value="import { ChatPromptTemplate } from &quot;@langchain/core/prompts&quot;;&#10;import { llmService } from &quot;./llmService&quot;;&#10;import {&#10;  ResumeOutputSchema,&#10;  ResumeOutput,&#10;  ResumeSection,&#10;} from &quot;./zodModels&quot;;&#10;&#10;export class ResumeGeneratorService {&#10;  constructor() {&#10;    this._buildSectionsContent = this._buildSectionsContent.bind(this);&#10;    this.buildResume = this.buildResume.bind(this);&#10;  }&#10;  /**&#10;   * Service for organizing pre-formatted resume sections into a structured resume document using LLM&#10;   */&#10;  async buildResume(&#10;    resumeSections: ResumeSection[],&#10;    llmConfig?: any&#10;  ): Promise&lt;ResumeOutput&gt; {&#10;    const prompt = ChatPromptTemplate.fromTemplate(`&#10;      You are a Senior Resume Architect and Document Organizer specializing in structuring pre-formatted resume sections into cohesive, professionally organized resumes.&#10;      &#10;      ## Mission&#10;      Your mission is to organize and structure already-formatted resume sections into a complete resume document. You must:&#10;      - Group sections by type (combine multiple experience sections, multiple skills sections, etc.)&#10;      - Apply standard resume ordering (Summary → Experience → Skills → Education → Projects → Certifications, etc.)&#10;      - Add appropriate section headers in markdown format&#10;      - Preserve all content exactly as provided - NO content editing or modification&#10;      - Create logical document flow and professional structure&#10;      &#10;      ## Input Data&#10;      **PRE-FORMATTED RESUME SECTIONS**: Each section is already optimized, formatted, and contains preserved requirement matches from previous processing steps.&#10;      &#10;      {sections_content}&#10;      &#10;      ## Organization Framework&#10;      &#10;      ### Section Consolidation Rules&#10;      **CRITICAL: PRESERVE ALL CONTENT EXACTLY**&#10;      - Combine sections of the same type by concatenating content&#10;      - Maintain original formatting, bullet points, and structure&#10;      - Preserve company names, dates, and all specific details exactly as provided&#10;      - Do not modify, edit, or rephrase any content&#10;      &#10;      ### Standard Resume Structure&#10;      **SECTION ORDERING (when sections are present):**&#10;      1. Summary/Profile (if available)&#10;      2. Experience (most important, always include if present)&#10;      3. Skills (technical and soft skills)&#10;      4. Education &#10;      5. Projects&#10;      6. Certifications&#10;      7. Achievements/Awards&#10;      8. Volunteering&#10;      9. Languages&#10;      &#10;      ### Header Application&#10;      - Add markdown headers: ## Summary, ## Experience, ## Skills, etc.&#10;      - Use exact section names that match content type&#10;      - Maintain clean, professional markdown formatting&#10;      &#10;      ### Quality Standards&#10;      - **Content Preservation**: Zero modification of section content&#10;      - **Logical Organization**: Professional resume flow and structure&#10;      - **Header Consistency**: Standard markdown formatting throughout&#10;      - **Section Completeness**: Include all provided sections in appropriate locations&#10;      &#10;      Organize the sections into a complete, professionally structured resume document.&#10;    `);&#10;&#10;    const sections_content = this._buildSectionsContent(resumeSections);&#10;&#10;    try {&#10;      const result = await llmService.invokeWithStructuredOutput(&#10;        prompt,&#10;        ResumeOutputSchema,&#10;        { sections_content },&#10;        llmConfig&#10;      );&#10;      return result;&#10;    } catch (e) {&#10;      // Fallback: return a minimal ResumeOutput with error message&#10;      console.error(&quot;[ERROR] buildResume failed:&quot;, e);&#10;      return {&#10;        resume: [],&#10;        optimization_summary: `Error occurred during resume organization - no structural changes applied`&#10;      };&#10;    }&#10;  };&#10;&#10;  private _buildSectionsContent(resumeSections: ResumeSection[]): string {&#10;    return resumeSections&#10;      .map(&#10;        (section) =&gt;&#10;          `Section Type: ${section.type}\nPre-Formatted Content: ${section.content}\n--- END SECTION ---\n`&#10;      )&#10;      .join(&quot;\n&quot;);&#10;  }&#10;}&#10;&#10;export const resumeGeneratorService = new ResumeGeneratorService();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>